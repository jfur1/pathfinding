{"ast":null,"code":"import _objectSpread from\"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _classCallCheck from\"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Node from'./Node/Node';import{dijkstra,getPath}from'../algorithms/dijkstra';import{astar,getAstarPath}from'../algorithms/astar';import'./pathfindingVisualizer.css';import{nodeName}from'jquery';var START_NODE_ROW=10;var START_NODE_COL=15;var FINISH_NODE_ROW=10;var FINISH_NODE_COL=35;var PathfindingVisualizer=/*#__PURE__*/function(_Component){_inherits(PathfindingVisualizer,_Component);var _super=_createSuper(PathfindingVisualizer);function PathfindingVisualizer(){var _this;_classCallCheck(this,PathfindingVisualizer);_this=_super.call(this);_this.initGrid=function(){var grid=[];var nodes={};for(var row=0;row<20;row++){var tmpRow=[];for(var col=0;col<50;col++){var nodeId=\"\".concat(row,\"-\").concat(col),nodeClass,node;var node=newNode(col,row);if(row===START_NODE_ROW&&col===START_NODE_COL){node.status=\"start\";}else if(row===FINISH_NODE_ROW&&col===FINISH_NODE_COL){node.status=\"target\";}else node.status=\"node\";tmpRow.push(node);nodes[nodeId]=node;}grid.push(tmpRow);}return[grid,nodes];};_this.state={grid:[],nodes:{},mouseDown:false,algoFinished:true,currentAlgo:null,start:null,target:null};return _this;}_createClass(PathfindingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){var board=this.initGrid();this.setState({grid:board[0],nodes:board[1]});}},{key:\"onMouseDown\",value:function onMouseDown(row,col){var newGrid=updateGrid(this.state.grid,row,col);var newNodes=updateNodes(this.state.nodes,row,col);this.setState({grid:newGrid,nodes:newNodes,mouseDown:true});}},{key:\"onMouseEnter\",value:function onMouseEnter(row,col){if(!this.state.mouseDown)return;var newGrid=updateGrid(this.state.grid,row,col);var newNodes=updateNodes(this.state.nodes,row,col);this.setState({grid:newGrid,nodes:newNodes});}},{key:\"onMouseUp\",value:function onMouseUp(){this.setState({mouseDown:false});}},{key:\"animateSearch\",value:function animateSearch(visited,path){var _this2=this;if(visited===false){console.log(\"No path found.\");this.algoFinished=true;document.getElementById(\"startButton\").disabled=false;document.getElementById(\"clearGridButton\").disabled=false;}var _loop=function _loop(i){if(i===visited.length){setTimeout(function(){_this2.animatePath(path);},10*i);return{v:void 0};}// Visited nodes get animated in 10ms intervals\nsetTimeout(function(){var node=visited[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-visited';},10*i);};for(var i=0;i<=visited.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}},{key:\"animatePath\",value:function animatePath(path){var _loop2=function _loop2(i){setTimeout(function(){var node=path[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-shortest-path';},35*i);};for(var i=0;i<path.length;i++){_loop2(i);}this.algoFinished=true;document.getElementById(\"startButton\").disabled=false;document.getElementById(\"clearGridButton\").disabled=false;}},{key:\"visualizeSearch\",value:function visualizeSearch(){var algo=document.getElementById(\"startButton\").innerHTML;document.getElementById(\"startButton\").disabled=true;document.getElementById(\"clearGridButton\").disabled=true;console.log(algo);this.algoFinished=false;var _this$state=this.state,grid=_this$state.grid,nodes=_this$state.nodes;var start=grid[START_NODE_ROW][START_NODE_COL];var goal=grid[FINISH_NODE_ROW][FINISH_NODE_COL];var visited=[];var path=[];// Select algo based on start button text\nif(algo===\"A* Search\"){console.log(nodes);// console.log(\"start:\", start)\n// console.log(\"start-id:\", start.id)\n// console.log(\"goal:\", goal)\nvisited=astar(nodes,start,goal,visited,grid,[]);path=getAstarPath(goal);console.log(\"Visited:\",visited);console.log(\"Path:\",path);this.animateSearch(visited,path);}else if(algo===\"Dijkstra's Algorithm\"){visited=dijkstra(grid,start,goal);path=getPath(goal);this.animateSearch(visited,path);}}},{key:\"clearGrid\",value:function clearGrid(){if(this.algoFinished){var board=this.initGrid();this.setState({grid:board[0],nodes:board[1]});for(var row=0;row<20;row++){for(var col=0;col<50;col++){if(row===START_NODE_ROW&&col===START_NODE_COL){//this.nodes[this.start].status = \"start\"\ndocument.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node node-start';}else if(row===FINISH_NODE_ROW&&col===FINISH_NODE_COL){document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node node-finish';//this.target.status = \"target\";\n}else{//this.nodes[`${row}-${col}`].status = \"unvisited\";\ndocument.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node';}}}}}// Initialize New Grid\n},{key:\"render\",value:function render(){var _this3=this;var _this$state2=this.state,grid=_this$state2.grid,mouseDown=_this$state2.mouseDown,algoFinished=_this$state2.algoFinished;var tableHTML=\"\";return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{class:\"board\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"center\",children:/*#__PURE__*/_jsx(\"button\",{id:\"startButton\",onClick:function onClick(){return _this3.visualizeSearch();},children:\"Visualize Algorithm\"})}),/*#__PURE__*/_jsx(\"div\",{class:\"center\",children:/*#__PURE__*/_jsx(\"button\",{id:\"clearGridButton\",onClick:function onClick(){return _this3.clearGrid();},children:\"Clear Grid\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"grid\",children:grid.map(function(row,rowIdx){return/*#__PURE__*/_jsx(\"div\",{children:row.map(function(node,nodeIdx){var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return/*#__PURE__*/_jsx(Node,{col:col,g:Infinity,h:null,f:Infinity,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseDown:mouseDown,onMouseDown:function onMouseDown(row,col){return _this3.onMouseDown(row,col);},onMouseEnter:function onMouseEnter(row,col){return _this3.onMouseEnter(row,col);},onMouseUp:function onMouseUp(){return _this3.onMouseUp();},row:row},nodeIdx);})},rowIdx);})})]})});}}]);return PathfindingVisualizer;}(Component);// Create a new Node\nexport{PathfindingVisualizer as default};var newNode=function newNode(col,row){return{col:col,row:row,isStart:row===START_NODE_ROW&&col===START_NODE_COL,isFinish:row===FINISH_NODE_ROW&&col===FINISH_NODE_COL,g:Infinity,h:null,f:Infinity,status:null,isVisited:false,isWall:false,previousNode:null,weight:0,id:\"\".concat(row,\"-\").concat(col)};};// Update our grid state\nvar updateGrid=function updateGrid(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];if(row===START_NODE_ROW&&col===START_NODE_COL||row===FINISH_NODE_ROW&&col===FINISH_NODE_COL){return grid;}var newNode=_objectSpread(_objectSpread({},node),{},{isWall:!node.isWall});newGrid[row][col]=newNode;return newGrid;};var updateNodes=function updateNodes(nodes,row,col){if(row===START_NODE_ROW&&col===START_NODE_COL||row===FINISH_NODE_ROW&&col===FINISH_NODE_COL){return nodes;}var newNodes=nodes;var node=nodes[\"\".concat(row,\"-\").concat(col)];var newNode=_objectSpread(_objectSpread({},node),{},{isWall:!node.isWall});if(newNode.isWall)newNode.status=\"wall\";newNodes[\"\".concat(row,\"-\").concat(col)]=newNode;return newNodes;};","map":{"version":3,"sources":["/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/pathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getPath","astar","getAstarPath","nodeName","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","initGrid","grid","nodes","row","tmpRow","col","nodeId","nodeClass","node","newNode","status","push","state","mouseDown","algoFinished","currentAlgo","start","target","board","setState","newGrid","updateGrid","newNodes","updateNodes","visited","path","console","log","document","getElementById","disabled","i","length","setTimeout","animatePath","className","algo","innerHTML","goal","animateSearch","tableHTML","visualizeSearch","clearGrid","map","rowIdx","nodeIdx","isFinish","isStart","isWall","Infinity","onMouseDown","onMouseEnter","onMouseUp","g","h","f","isVisited","previousNode","weight","id","slice"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getPath} from '../algorithms/dijkstra';\nimport {astar, getAstarPath} from '../algorithms/astar';\nimport './pathfindingVisualizer.css';\nimport { nodeName } from 'jquery';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      nodes: {},\n      mouseDown: false,\n      algoFinished: true,\n      currentAlgo: null,\n      start: null,\n      target: null\n    };\n  }\n\n  componentDidMount() {\n    const board = this.initGrid();\n    this.setState({grid: board[0], nodes: board[1]});\n  }\n\n  onMouseDown(row, col) {\n    const newGrid = updateGrid(this.state.grid, row, col);\n    const newNodes = updateNodes(this.state.nodes, row, col);\n    this.setState({grid: newGrid, nodes: newNodes, mouseDown: true});\n  }\n\n  onMouseEnter(row, col) {\n    if (!this.state.mouseDown) return;\n    const newGrid = updateGrid(this.state.grid, row, col);\n    const newNodes = updateNodes(this.state.nodes, row, col);\n    this.setState({grid: newGrid, nodes: newNodes});\n  }\n\n  onMouseUp() {\n    this.setState({mouseDown: false});\n  }\n\n  animateSearch(visited, path) {\n    if(visited === false){\n      console.log(\"No path found.\")\n      this.algoFinished = true;\n      document.getElementById(\"startButton\").disabled = false;\n      document.getElementById(\"clearGridButton\").disabled = false;\n    }\n    for (let i = 0; i <= visited.length; i++) {\n      if (i === visited.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      // Visited nodes get animated in 10ms intervals\n      setTimeout(() => {\n        const node = visited[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 35 * i);\n    }\n    this.algoFinished = true;\n    document.getElementById(\"startButton\").disabled = false;\n    document.getElementById(\"clearGridButton\").disabled = false;\n  }\n\n  visualizeSearch() {\n      const algo = document.getElementById(\"startButton\").innerHTML;\n      document.getElementById(\"startButton\").disabled = true;\n      document.getElementById(\"clearGridButton\").disabled = true;\n      console.log(algo);\n      this.algoFinished = false;\n      const {grid, nodes} = this.state;\n      const start = grid[START_NODE_ROW][START_NODE_COL];\n      const goal = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      var visited = [];\n      var path = [];\n      // Select algo based on start button text\n      if(algo === \"A* Search\"){\n        console.log(nodes)\n        // console.log(\"start:\", start)\n        // console.log(\"start-id:\", start.id)\n        // console.log(\"goal:\", goal)\n        visited = astar(nodes, start, goal, visited, grid, []);\n        path = getAstarPath(goal);\n        console.log(\"Visited:\", visited);\n        console.log(\"Path:\", path);\n        this.animateSearch(visited, path);\n      }\n      else if(algo === \"Dijkstra's Algorithm\"){\n        visited = dijkstra(grid, start, goal);\n        path = getPath(goal);\n        this.animateSearch(visited, path);\n      }\n  }\n\n  clearGrid() {\n    if(this.algoFinished){\n      const board = this.initGrid();\n      this.setState({grid: board[0], nodes: board[1]});\n      for(let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n          if(row === START_NODE_ROW && col === START_NODE_COL){\n            //this.nodes[this.start].status = \"start\"\n            document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          }\n          else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n            //this.target.status = \"target\";\n          }\n          else{\n            //this.nodes[`${row}-${col}`].status = \"unvisited\";\n            document.getElementById(`node-${row}-${col}`).className = 'node';\n          }\n        }\n      }\n    }\n  }\n  // Initialize New Grid\n  initGrid = () => {\n    var grid = [];\n    var nodes = {};\n    for (let row = 0; row < 20; row++) {\n      const tmpRow = [];\n      for (let col = 0; col < 50; col++) {\n        var nodeId = `${row}-${col}`, nodeClass, node;\n        var node = newNode(col, row);\n\n        if(row === START_NODE_ROW && col === START_NODE_COL){\n          node.status = \"start\"\n        } \n        else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n          node.status = \"target\"\n        } \n        else node.status = \"node\"\n\n        tmpRow.push(node);\n        nodes[nodeId] = node;\n      }\n      grid.push(tmpRow);\n    }\n    return [grid, nodes];\n  };\n\n  render() {\n    const {grid, mouseDown, algoFinished} = this.state;\n    let tableHTML = \"\";\n    return (\n      <>\n        \n        <div class=\"board\">\n        <div class=\"center\">\n          <button id=\"startButton\" onClick={() => this.visualizeSearch()}>Visualize Algorithm</button>\n        </div>\n        <div class=\"center\">\n          <button id=\"clearGridButton\" onClick={() => this.clearGrid()}>Clear Grid</button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      g = {Infinity}\n                      h = {null}\n                      f = {Infinity}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseDown={mouseDown}\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n                      onMouseUp={() => this.onMouseUp()}\n                      row={row}></Node>\n                      \n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        </div>\n      </>\n    );\n  }\n}\n\n// Create a new Node\nconst newNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    g: Infinity,\n    h: null,\n    f: Infinity,\n    status: null,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    weight: 0,\n    id: `${row}-${col}`\n  };\n};\n\n// Update our grid state\nconst updateGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return grid;\n  }\n  const newNode = {\n    ...node,\n   isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst updateNodes = (nodes, row, col) => {\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return nodes;\n  }\n  const newNodes = nodes;\n  const node = nodes[`${row}-${col}`];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  if(newNode.isWall) newNode.status = \"wall\";\n  newNodes[`${row}-${col}`] = newNode;\n  return newNodes;\n}"]},"metadata":{},"sourceType":"module"}