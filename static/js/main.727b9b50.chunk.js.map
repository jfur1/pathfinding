{"version":3,"sources":["pathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","pathfindingVisualizer/pathfindingVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","navbar.jsx","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","type","g","h","f","direction","weight","status","id","className","Component","dijkstra","grid","start","goal","visited","frontier","nodes","node","push","getNodes","length","sortNodes","shift","Infinity","isVisited","updateNeighborCosts","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getNeighbors","previousNode","astar","distance","updateUnvisitedNeighbors","getUnvisitedNeighbors","distanceToFinishNode","PathfindingVisualizer","initGrid","n_rows","state","N_ROWS","n_cols","N_COLS","initialGrid","tmpRow","newNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","heuristic","Math","abs","isNode","mousePressed","N_ROWS_MOBILE","N_COLS_MOBILE","isRunning","isDesktop","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","r","c","isGridClear","document","getElementById","newGrid","updateGrid","nodeClassName","nodeClass","isFinishN","startNode","isFinishNode","finishNode","wallNode","slice","algo","visitedNodesInOrder","finish","stack","nextNode","bfs","pop","dfs","path","unshift","getPath","animate","i","setTimeout","animatePath","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onMouseLeave","map","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","onClick","visualize","isDesktopView","toggleView","window","onclick","event","target","matches","dropdowns","getElementsByClassName","openDropdown","classList","contains","remove","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.727b9b50.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      g,\n      h,\n      f,\n      direction,\n      weight,\n      status\n    } = this.props;\n    const type = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${type}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}","// Dijkstra's Algorithm:\n//  - Inputs:\n//      - 2D Grid Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - List of nodes representing the shortest possible path, if one exists.\n\nexport function dijkstra(grid, start, goal) {\n    const visited = [];\n    start.g = 0;\n    const frontier = getNodes(grid);\n    while (!!frontier.length) {\n      sortNodes(frontier);\n      // Guarenteed to be next closest node since we've just sorted the unvisited nodes by distance\n      const node = frontier.shift();\n      \n      // Skip checks for any walls\n      if (node.isWall) continue;\n      // If the closest node is infinite distance, then no path exists to our goal\n      if (node.g === Infinity) return visited;\n\n      node.isVisited = true;\n      visited.push(node);\n      if (node === goal) return visited;\n      updateNeighborCosts(node, grid);\n    }\n  }\n  \n  // Sort the nodes by distance\n  function sortNodes(frontier) {\n    frontier.sort((nodeA, nodeB) => nodeA.g - nodeB.g);\n  }\n  \n  function updateNeighborCosts(node, grid) {\n    const unvisitedNeighbors = getNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.g = node.g + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the goal to find the shortest path.\n\n  export function getPath(goal) {\n    const path = [];\n    let tmpNode = goal;\n    while (tmpNode !== null) {\n      path.unshift(tmpNode);\n      tmpNode = tmpNode.previousNode;\n    }\n    return path;\n  }","// A* Search Algorithm\n//  - Allowable Moves: [N, E, S, W]\n//  - Inputs\n//      - Adjacency Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - Guarenteed shortest possible path\n// export function astar(nodes, start, goal, explored, grid, heuristic){\n//     if(!start || !goal || start === goal)\n//         return false;\n//     nodes[start.id].g = 0;\n//     nodes[start.id].f = 0;\n//     nodes[start.id].direction = \"N\";\n//     let frontier = Object.keys(nodes);\n//     console.log(\"frontier:\", frontier)\n//     while(frontier.length){\n//         // Pop the next closest node off the frontier\n//         let node = closestNode(nodes, frontier);\n//         // Make sure the node is not a wall\n//         while(node.status === \"wall\"  && frontier.length){\n//             node = closestNode(nodes, frontier);\n//         }\n//         if(node.g === Infinity) return false;\n//         explored.push(node);\n//         node.status = \"visited\";\n//         if(node.id === goal.id) return explored;\n\n//         updateNeighbors(nodes, node, grid, start, goal, heuristic);\n\n//     }\n    \n// }\n\n// function closestNode(nodes, frontier){\n//     let node, index;\n//     for(let i = 0; i < frontier.length; i++){\n//         if(!node || node.f > nodes[frontier[i]].f){\n//             node = nodes[frontier[i]];\n//             index = i;\n//         }\n//         else if(node.f === nodes[frontier[i]].f){\n//             if(node.h > nodes[frontier[i]].h){\n//                 node = nodes[frontier[i]];\n//                 index = i;\n//             }\n//         }\n//     }\n//     frontier.splice(index, 1);\n//     return node;\n// }\n\n// function updateNeighbors(nodes, node, grid, start, target, heuristic){\n//     let neighbors = getNeighbors(node.id, nodes, grid);\n//     for(let neighbor of neighbors){\n//         if(target){\n//             // console.log(\"node:\", node);\n//             // console.log(\"neighbor:\", neighbor)\n//             updateNode(node, nodes[neighbor], nodes[start.id], nodes[target.id], nodes, grid, heuristic);\n//         }\n//         else{\n//             updateNode(node, nodes[neighbor]);\n//         }\n//     }\n// }\n\n// function updateNode(node, tmpTarget, trueStart, trueTarget, nodes, grid, heuristic){\n//     let path = getPathCost(node, tmpTarget);\n//     // If our new target node has no heuristic => Assign to be manhattan distance\n//     if(!tmpTarget.h) tmpTarget.h = manhattanDistance(tmpTarget, trueTarget);\n//     let dist = node.g + tmpTarget.weight + path[0];\n//     if(dist < tmpTarget.g){\n//         tmpTarget.g = dist;\n//         tmpTarget.f = tmpTarget.g + tmpTarget.h\n//         tmpTarget.previousNode = node;\n//         tmpTarget.path = path[1];\n//         tmpTarget.direction = path[2];\n//     }\n// }\n\n// function getNeighbors(id, nodes, grid){\n//     let coords = id.split(\"-\");\n//     let x = parseInt(coords[0]);\n//     let y = parseInt(coords[1]);\n//     let neighbors = [];\n//     let neighbor;\n//     // North\n//     if(grid[x-1] && grid[x-1][y]){\n//         neighbor = `${(x-1).toString()}-${y.toString()}`;\n//         if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n//     }\n//     // South\n//     if(grid[x+1] && grid[x+1][y]){\n//         neighbor = `${(x+1).toString()}-${y.toString()}`;\n//         if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n//     }\n//     if(grid[x][y-1]){\n//         neighbor = `${x.toString()}-${(y - 1).toString()}`;\n//         if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n//     }\n//     if(grid[x][y+1]){\n//         neighbor = `${x.toString()}-${(y + 1).toString()}`;\n//         if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n//     }\n//     return neighbors;\n// }\n\n// function getPathCost(nodeA, nodeB){\n//     let startCoords = nodeA.id.split(\"-\");\n//     let targetCoords = nodeB.id.split(\"-\");\n//     let nodeAx = parseInt(startCoords[0]);\n//     let nodeAy = parseInt(startCoords[1]);\n//     let nodeBx = parseInt(targetCoords[0]);\n//     let nodeBy = parseInt(targetCoords[1]);\n//     // B is above A\n//     if(nodeBx < nodeAx && nodeAy === nodeBy){\n//         if(nodeA.direction === \"N\") return [1, [\"f\"], \"N\"];\n//         else if(nodeA.direction === \"E\") return [2, [\"l\", \"f\"], \"N\"];\n//         else if(nodeA.direction === \"W\") return [2, [\"r\", \"f\"], \"N\"];\n//         else if(nodeA.direction === \"S\") return [3, [\"r\", \"r\", \"f\"], \"N\"];\n//         else if(nodeA.direction === \"NE\") return [1.5, null, \"N\"];\n//         else if(nodeA.direction === \"SE\") return [2.5, null, \"N\"];\n//         else if(nodeA.direction === \"NW\") return [1.5, null, \"N\"];\n//         else if(nodeA.direction === \"SW\") return [2.5, null, \"N\"];\n//     }\n//     else if(nodeBx > nodeAx && nodeAy === nodeBy){\n//         if(nodeA.direction === \"N\") return [3, [\"r\", \"r\", \"f\"], \"S\"];\n//         else if(nodeA.direction === \"E\") return [2, [\"r\", \"f\"], \"S\"];\n//         else if(nodeA.direction === \"W\") return [2, [\"l\", \"f\"], \"S\"];\n//         else if(nodeA.direction === \"S\") return [1, [\"f\"], \"S\"];\n//         else if(nodeA.direction === \"NE\") return [2.5, null, \"S\"];\n//         else if(nodeA.direction === \"SE\") return [1.5, null, \"S\"];\n//         else if(nodeA.direction === \"NW\") return [2.5, null, \"S\"];\n//         else if(nodeA.direction === \"SW\") return [1.5, null, \"S\"];\n//     }\n//     if(nodeBy < nodeAy && nodeAx === nodeBx){\n//         if(nodeA.direction === \"N\") return [2, [\"l\", \"f\"], \"W\"];\n//         else if(nodeA.direction === \"E\") return [3, [\"l\", \"l\", \"f\"], \"W\"];\n//         else if(nodeA.direction === \"W\") return [1, [\"f\"], \"W\"];\n//         else if(nodeA.direction === \"S\") return [2, [\"r\", \"f\"], \"W\"];\n//         else if(nodeA.direction === \"NE\") return [2.5, null, \"W\"];\n//         else if(nodeA.direction === \"SE\") return [2.5, null, \"W\"];\n//         else if(nodeA.direction === \"NW\") return [1.5, null, \"W\"];\n//         else if(nodeA.direction === \"SW\") return [1.5, null, \"W\"];\n//     }\n//     else if(nodeBy > nodeAy && nodeAx === nodeBx){\n//         if(nodeA.direction === \"N\") return [2, [\"r\", \"f\"], \"E\"];\n//         else if(nodeA.direction === \"E\") return [1, [\"f\"], \"E\"];\n//         else if(nodeA.direction === \"W\") return [3, [\"r\",\"r\",\"f\"], \"E\"];\n//         else if(nodeA.direction === \"S\") return [2, [\"l\", \"f\"], \"E\"];\n//         else if(nodeA.direction === \"NE\") return [1.5, null, \"E\"];\n//         else if(nodeA.direction === \"SE\") return [1.5, null, \"E\"];\n//         else if(nodeA.direction === \"NW\") return [2.5, null, \"E\"];\n//         else if(nodeA.direction === \"SW\") return [2.5, null, \"E\"];\n//     }\n// }\n\n// function manhattanDistance(nodeA, nodeB){\n//     let nodeAcoords = nodeA.id.split(\"-\").map(x => parseInt(x));\n//     let nodeBcoords = nodeB.id.split(\"-\").map(x => parseInt(x));\n//     let nodeAx = nodeAcoords[0];\n//     let nodeBx = nodeBcoords[0];\n//     let nodeAy = nodeAcoords[1];\n//     let nodeBy = nodeBcoords[1];\n\n//     let delta_x = Math.abs(nodeAx - nodeBx);\n//     let delta_y = Math.abs(nodeAy - nodeBy);\n\n//     return (delta_x + delta_y);\n// }\n\nexport function astar(grid, start, goal){\n\n    const visited = [];\n    start.distance = 0;\n    const frontier = getNodes(grid);\n\n    while(frontier.length){\n        sortByDistance(frontier);\n        const node = frontier.shift();\n        if(!node.isWall){\n            if(node.distance === Infinity) return false;\n            node.isVisited = true;\n            visited.push(node);\n            if(node == goal) return visited;\n            updateUnvisitedNeighbors(node, grid);\n        }\n    }\n}\n\nfunction getNodes(grid){\n    const nodes = [];\n    for(const row of grid){\n        for(const node of row){\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nfunction sortByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n      neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nexport function getAstarPath(goal) {\n    const path = [];\n    let tmpNode = goal;\n    while (tmpNode !== null) {\n      path.unshift(tmpNode);\n      tmpNode = tmpNode.previousNode;\n    }\n    return path;\n  }\n\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra} from '../algorithms/dijkstra';\nimport {astar} from '../algorithms/astar';\nimport {dfs} from '../algorithms/dfs';\nimport { bfs } from '../algorithms/bfs';\nimport './pathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(){\n    super();\n    this.state = {\n      grid: [],\n      START_NODE_ROW: 5,\n      START_NODE_COL: 5,\n      FINISH_NODE_ROW: 5,\n      FINISH_NODE_COL: 15,\n      mousePressed: false,\n      N_ROWS: 20,\n      N_COLS: 50,\n      N_ROWS_MOBILE: 10,\n      N_COLS_MOBILE: 20,\n      isRunning: false,\n      isStart: false,\n      isFinish: false,\n      isWall: false,\n      row: 0,\n      col: 0,\n      isDesktop: true,\n    };\n    // Event Handler Prototypes\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.initGrid();\n    this.setState({grid});\n  }\n\n  toggleIsRunning() {\n    this.setState({isRunning: !this.state.isRunning});\n  }\n\n  toggleView() {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.clearWalls();\n      const isDesktop = !this.state.isDesktop;\n      let grid;\n      if (isDesktop) {\n        grid = this.initGrid(\n          this.state.N_ROWS,\n          this.state.N_COLS,\n        );\n        this.setState({isDesktop, grid});\n      } else {\n        if (\n          this.state.START_NODE_ROW > this.state.N_ROWS_MOBILE ||\n          this.state.FINISH_NODE_ROW > this.state.N_ROWS_MOBILE ||\n          this.state.START_NODE_COL > this.state.N_COLS_MOBILE ||\n          this.state.FINISH_NODE_COL > this.state.N_COLS_MOBILE\n        ) {\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\n        } else {\n          grid = this.initGrid(\n            this.state.N_ROWS_MOBILE,\n            this.state.N_COLS_MOBILE,\n          );\n          this.setState({isDesktop, grid});\n        }\n      }\n    }\n  }\n\n  /* -------------------- Initialize 2D Grid --------------------- */\n  initGrid = (\n    n_rows = this.state.N_ROWS,\n    n_cols = this.state.N_COLS,\n  ) => {\n    const initialGrid = [];\n    for(let row = 0; row < n_rows; row++){\n      const tmpRow = [];\n      for(let col = 0; col < n_cols; col++){\n        tmpRow.push(this.newNode(row, col));\n      }\n      initialGrid.push(tmpRow);\n    }\n    return initialGrid;\n  };\n\n  newNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n      distance: Infinity,\n      heuristic:  \n        Math.abs(this.state.FINISH_NODE_ROW - row) + \n        Math.abs(this.state.FINISH_NODE_COL - col),\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      isNode: true,\n    }; \n  };\n\n  /* --------------------- Mouse Event Handlers ----------------------- */\n  handleMouseDown(r, c){\n    if(!this.state.isRunning){\n      if(this.isGridClear()){\n        if(document.getElementById(`node-${r}-${c}`).className === 'node node-start'){\n          this.setState({\n            mousePressed: true,\n            isStart: true,\n            row: r,\n            col: c,\n          });\n        } else if(document.getElementById(`node-${r}-${c}`).className === 'node node-finish'){\n          this.setState({\n            mousePressed: true,\n            isFinish: true,\n            row: r,\n            col: c,\n          });\n        } else{\n          const newGrid = updateGrid(this.state.grid, r, c);\n          this.setState({\n            grid: newGrid, \n            mousePressed: true,\n            isWall: true,\n            row: r,\n            col: c,\n          });\n        }\n      } else{\n        this.clearGrid();\n      }\n    }\n  }\n\n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName === 'node node-visited' ||\n          nodeClassName === 'node node-shortest-path'\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  handleMouseEnter(r, c) {\n    if (!this.state.isRunning) {\n      if (this.state.mousePressed) {\n        const nodeClass = document.getElementById(`node-${r}-${c}`)\n          .className;\n        if (this.state.isStart) {\n          if (nodeClass !== 'node node-wall') {\n            const prevStartNode = this.state.grid[this.state.row][this.state.col];\n            prevStartNode.isStart = false;\n            document.getElementById(`node-${this.state.row}-${this.state.col}`,).className = 'node';\n            this.setState({row: r, col: c});\n            const currStartNode = this.state.grid[r][c];\n            currStartNode.isStart = true;\n            document.getElementById(`node-${r}-${c}`).className ='node node-start';}\n          this.setState({START_NODE_ROW: r, START_NODE_COL: c});\n        } else if (this.state.isFinishN) {\n          if (nodeClass !== 'node node-wall') {\n            const prevFinish = this.state.grid[this.state.row][this.state.col];\n            prevFinish.isFinish = false;\n            document.getElementById(`node-${this.state.row}-${this.state.col}`,).className = 'node';\n            this.setState({row: r, col: c});\n            const currentFinish = this.state.grid[r][c];\n            currentFinish.isFinish = true;\n            document.getElementById(`node-${r}-${c}`).className = 'node node-finish';\n          }\n          this.setState({FINISH_NODE_ROW: r, FINISH_NODE_COL: c});\n        } else if (this.state.isWall) {\n          const newGrid = updateGrid(this.state.grid, r, c);\n          this.setState({grid: newGrid});\n        }\n      }\n    }\n  }\n\n  handleMouseUp(row, col) {\n    if (!this.state.isRunning) {\n      this.setState({mousePressed: false});\n      if (this.state.isStart) {\n        const startNode = !this.state.isStart;\n        this.setState({startNode, START_NODE_ROW: row, START_NODE_COL: col});\n      } else if (this.state.isFinishNode) {\n        const finishNode = !this.state.isFinish;\n        this.setState({\n          finishNode,\n          FINISH_NODE_ROW: row,\n          FINISH_NODE_COL: col,\n        });\n      }\n      this.initGrid();\n    }\n  }\n\n  handleMouseLeave() {\n    if (this.state.isStart) {\n      const startNode = !this.state.isStart;\n      this.setState({startNode, mousePressed: false});\n    } else if (this.state.isFinish) {\n      const finishNode = !this.state.isFinish;\n      this.setState({finishNode, mousePressed: false});\n    } else if (this.state.isWall) {\n      const wallNode = !this.state.isWall;\n      this.setState({wallNode, mousePressed: false});\n      this.initGrid();\n    }\n  }\n\n  /* ---------------------- Update Grid / Walls --------------------------- */\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let className = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            className !== 'node node-start' &&\n            className !== 'node node-finish' &&\n            className !== 'node node-wall'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (className === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic = 0;\n          }\n          if (className === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let className = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (className === 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n\n  /* ---------------------------------- Animations ----------------------------- */\n\n  visualize(algo){\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {grid} = this.state;\n      const start =\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finish =\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, start, finish);\n          break;\n        case 'astar':\n          visitedNodesInOrder = astar(grid, start, finish);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, start, finish);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, start, finish);\n          break;\n        default:\n          // should not execute\n          break;\n      }\n      const path = getPath(finish);\n      path.push('end');\n      this.animate(visitedNodesInOrder, path);\n    }\n  }\n\n  animate(visitedNodesInOrder, path) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClass = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClass !== 'node node-start' &&\n          nodeClass !== 'node node-finish'\n        ) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      if (path[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = path[i];\n          const nodeClass = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClass !== 'node node-start' &&\n            nodeClass !== 'node node-finish'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n\n  /* ------------------------------- Construct Path ----------------------------- */\n    render() {\n      const {grid, mousePressed} = this.state;\n      return (\n        <div>\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n            <a className=\"navbar-brand\" href=\"/\">\n              <b>PathFinding Visualizer</b>\n            </a>\n            <button\n              className=\"navbar-toggler\"\n              type=\"button\"\n              data-toggle=\"collapse\"\n              data-target=\"#navbarNav\"\n              aria-controls=\"navbarNav\"\n              aria-expanded=\"false\"\n              aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <a\n                    className=\"nav-link\"\n                    href=\"http://www.github.com/jfur1/pathfinding\">\n                    {' '}\n                    PathFinder Visualizer code{' '}\n                  </a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"https://jfur1.github.io\">\n                    Check Out Other Cool Projects\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </nav>\n\n          <table\n            className=\"grid-container\"\n            onMouseLeave={() => this.handleMouseLeave()}>\n            <tbody className=\"grid\">\n              {grid.map((row, rowIdx) => {\n                return (\n                  <tr key={rowIdx}>\n                    {row.map((node, nodeIdx) => {\n                      const {row, col, isFinish, isStart, isWall} = node;\n                      return (\n                        <Node\n                          key={nodeIdx}\n                          col={col}\n                          isFinish={isFinish}\n                          isStart={isStart}\n                          isWall={isWall}\n                          mousePressed={mousePressed}\n                          onMouseDown={(row, col) =>\n                            this.handleMouseDown(row, col)\n                          }\n                          onMouseEnter={(row, col) =>\n                            this.handleMouseEnter(row, col)\n                          }\n                          onMouseUp={() => this.handleMouseUp(row, col)}\n                          row={row}></Node>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => this.clearGrid()}>\n            Clear Grid\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={() => this.clearWalls()}>\n            Clear Walls\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => this.visualize('Dijkstra')}>\n            Dijkstra's\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => this.visualize('astar')}>\n            A*\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => this.visualize('BFS')}>\n            Breadth-First Search\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => this.visualize('DFS')}>\n            Depth-First Search\n          </button>\n          {this.state.isDesktopView ? (\n            <button\n              type=\"button\"\n              className=\"btn btn-light\"\n              onClick={() => this.toggleView()}>\n              Mobile View\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={() => this.toggleView()}>\n              Desktop View\n            </button>\n          )}\n        </div>\n      );\n    }\n  };\n\n\n  /******************** Create Walls ********************/\n  const updateGrid = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    if (!node.isStart && !node.isFinish && node.isNode) {\n      const newNode = {\n        ...node,\n        isWall: !node.isWall,\n      };\n      newGrid[row][col] = newNode;\n    }\n    return newGrid;\n  };\n\n  // Backtracks from the goal to find the shortest path.\n  // Only works when called after the pathfinding method has executed.\n  function getPath(goal) {\n    const path = [];\n    let node = goal;\n    while (node !== null) {\n      path.unshift(node);\n      node = node.previousNode;\n    }\n    return path;\n  }\n\n// export default class PathfindingVisualizer extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       grid: [],\n//       nodes: {},\n//       mouseDown: false,\n//       algoFinished: true,\n//       currentAlgo: null,\n//       start: null,\n//       target: null\n//     };\n//   }\n\n//   componentDidMount() {\n//     const board = this.initGrid();\n//     this.setState({grid: board[0], nodes: board[1]});\n//   }\n\n//   onMouseDown(row, col) {\n//     // const newGrid = updateGrid(this.state.grid, row, col);\n//     // const newNodes = updateNodes(this.state.nodes, row, col);\n//     const board = updateBoard(this.state.grid, this.state.nodes, row, col);\n//     this.setState({grid: board[0], nodes: board[1], mouseDown: true});\n//   }\n\n//   onMouseEnter(row, col) {\n//     if (!this.state.mouseDown) return;\n//     // const newGrid = updateGrid(this.state.grid, row, col);\n//     // const newNodes = updateNodes(this.state.nodes, row, col);\n//     const board = updateBoard(this.state.grid, this.state.nodes, row, col);\n//     this.setState({grid: board[0], nodes: board[1]});\n//   }\n\n//   onMouseUp() {\n//     this.setState({mouseDown: false});\n//   }\n\n//   animateSearch(visited, path) {\n//     if(visited === false || path.length === 1 || visited.length === 1){\n//       console.log(\"No path found.\")\n//       this.algoFinished = true;\n//       document.getElementById(\"startButton\").disabled = false;\n//       document.getElementById(\"clearGridButton\").disabled = false;\n//     }else{\n//         for (let i = 0; i <= visited.length; i++) {\n//           if (i === visited.length) {\n//             setTimeout(() => {\n//               this.animatePath(path);\n//             }, 10 * i);\n//             return;\n//           }\n//           // Visited nodes get animated in 10ms intervals\n//           setTimeout(() => {\n//             const node = visited[i];\n//             document.getElementById(`node-${node.row}-${node.col}`).className =\n//               'node node-visited';\n//           }, 10 * i);\n//         }\n//       }\n//     }\n\n//   animatePath(path) {\n//     for (let i = 0; i < path.length; i++) {\n//       setTimeout(() => {\n//         const node = path[i];\n//         document.getElementById(`node-${node.row}-${node.col}`).className =\n//           'node node-shortest-path';\n//       }, 25 * i);\n//     }\n//     this.algoFinished = true;\n//     document.getElementById(\"startButton\").disabled = false;\n//     document.getElementById(\"clearGridButton\").disabled = false;\n//   }\n\n//   visualizeSearch() {\n//       const algo = document.getElementById(\"startButton\").innerHTML;\n//       if(algo === \"Visualize Algorithm\"){\n//         console.log(\"Select an algorithm!\");\n//       }\n//       else{\n//         console.log(\"Selected Algorithm:\", algo);\n\n//         // Clear any visited nodes from the grid\n//         this.clearGrid();\n//         document.getElementById(\"startButton\").disabled = true;\n//         document.getElementById(\"clearGridButton\").disabled = true;\n//         this.algoFinished = false;\n\n//         const {grid, nodes} = this.state;\n//         const start = grid[START_NODE_ROW][START_NODE_COL];\n//         const goal = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n//         var visited = [];\n//         var path = [];\n\n//         // Select algo based on start button text\n//         if(algo === \"A* Search\"){\n//           console.log(nodes);\n//           // console.log(\"start:\", start)\n//           // console.log(\"start-id:\", start.id)\n//           // console.log(\"goal:\", goal)\n//           //visited = astar(nodes, start, goal, visited, grid, []);\n//           visited = astar(grid, start, goal);\n//           path = getAstarPath(goal);\n//           console.log(\"Astar Visited:\", visited);\n//           console.log(\"Astar Path:\", path);\n//           this.animateSearch(visited, path);\n//         }\n//         else if(algo === \"Dijkstra's Algorithm\"){\n//           visited = dijkstra(grid, start, goal);\n//           path = getPath(goal);\n//           console.log(\"Dijkstra Visited:\", visited);\n//           console.log(\"Dijkstra Path:\", path);\n//           this.animateSearch(visited, path);\n//         }else if(algo === \"Depth-First-Search\"){\n//           visited = dfs(grid, start, goal);\n//           path = getPath(goal);\n//           console.log(\"DFS Visited:\", visited);\n//           console.log(\"DFS Path:\", path);\n//           this.animateSearch(visited, path);\n//         }else if(algo === \"Breadth-First-Search\"){\n//           visited = bfs(grid, start, goal);\n//           path = getPath(goal);\n//           console.log(\"BFS Visited:\", visited);\n//           console.log(\"BFS Path:\", path);\n//           this.animateSearch(visited, path);\n//         }\n//       }\n//   }\n//   // Same as init grid, exept walls & start/goal nodes are kept\n//   clearGrid() {\n//     if(this.algoFinished){\n//       for(let row = 0; row < 20; row++) {\n//         for (let col = 0; col < 50; col++) {\n//           this.state.grid[row][col].previousNode = null;\n//           this.state.grid[row][col].isVisited = false;\n//           if(row === START_NODE_ROW && col === START_NODE_COL){\n//             document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n//           }\n//           else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n//             document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n//           }\n//           else if(document.getElementById(`node-${row}-${col}`).className === \"node node-visited\"){\n//             document.getElementById(`node-${row}-${col}`).className = 'node';\n//           }\n//           else if(document.getElementById(`node-${row}-${col}`).className === \"node node-shortest-path\"){\n//             document.getElementById(`node-${row}-${col}`).className = 'node';\n//           }\n//         }\n//       }\n//     }\n//   }\n//   // Initialize New Grid\n//   initGrid = () => {\n//     var grid = [];\n//     var nodes = {};\n//     for (let row = 0; row < 20; row++) {\n//       const tmpRow = [];\n//       for (let col = 0; col < 50; col++) {\n//         var nodeId = `${row}-${col}`, nodeClass, node;\n//         var node = newNode(col, row);\n\n//         if(row === START_NODE_ROW && col === START_NODE_COL){\n//           node.status = \"start\"\n//         } \n//         else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n//           node.status = \"target\"\n//         } \n//         else node.status = \"node\"\n\n//         tmpRow.push(node);\n//         nodes[nodeId] = node;\n//       }\n//       grid.push(tmpRow);\n//     }\n//     return [grid, nodes];\n//   };\n\n//   render() {\n//     const {grid, mouseDown, algoFinished} = this.state;\n//     let tableHTML = \"\";\n//     return (\n//       <>\n//         <div class=\"board\">\n//         <div class=\"center\">\n//           <button id=\"startButton\" onClick={() => this.visualizeSearch()}>Visualize Algorithm</button>\n//         </div>\n//         <div class=\"center\">\n//           <button id=\"clearGridButton\" onClick={() => this.initGrid()}>Reset Grid</button>\n//         </div>\n//         <div className=\"grid\">\n//           {grid.map((row, rowIdx) => {\n//             return (\n//               <div key={rowIdx}>\n//                 {row.map((node, nodeIdx) => {\n//                   const {row, col, isFinish, isStart, isWall} = node;\n//                   return (\n//                     <Node\n//                       key={nodeIdx}\n//                       col={col}\n//                       g = {Infinity}\n//                       h = {null}\n//                       f = {Infinity}\n//                       isFinish={isFinish}\n//                       isStart={isStart}\n//                       isWall={isWall}\n//                       mouseDown={mouseDown}\n//                       onMouseDown={(row, col) => this.onMouseDown(row, col)}\n//                       onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n//                       onMouseUp={() => this.onMouseUp()}\n//                       row={row}></Node>\n//                   );\n//                 })}\n//               </div>\n//             );\n//           })}\n//         </div>\n//         </div>\n//       </>\n//     );\n//   }\n// }\n// // Create a new Node\n// const newNode = (col, row) => {\n//   return {\n//     col,\n//     row,\n//     isStart: row === START_NODE_ROW && col === START_NODE_COL,\n//     isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n//     g: Infinity,\n//     h: null,\n//     f: Infinity,\n//     status: null,\n//     isVisited: false,\n//     isWall: false,\n//     previousNode: null,\n//     weight: 0,\n//     id: `${row}-${col}`\n//   };\n// };\n// // Update our grid state\n// const updateBoard = (grid, nodes, row, col) => {\n//   // Create copies of grid & nodes\n//   const newGrid = grid.slice();\n//   const newNodes = nodes;\n//   // If start/goal node, continue\n//   if(row === START_NODE_ROW && col === START_NODE_COL \n//     || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n//     return [grid, nodes];\n//   }\n//   // Get the node in question\n//   const node = newGrid[row][col];\n//   // Create a new node with prop \"isWall\" toggled\n//   const newNode = {\n//     ...node,\n//    isWall: !node.isWall,\n//   };\n//   // Set status to wall if .isWall === true\n//   if(newNode.isWall) newNode.status = \"wall\";\n//   else newNode.status = \"node\";\n//   // Update the new node in the grid & nodes sets, then return to be updated as state\n//   newNodes[`${row}-${col}`] = newNode;\n//   newGrid[row][col] = newNode;\n\n//   return [newGrid, newNodes];\n// };","export function bfs(grid, start, goal){\n    const visited = [];\n    let stack = [start];\n    while(stack.length){\n        const node = stack.shift();\n        if(node.id === goal.id) return visited;\n\n        if(!node.isWall && (node.isStart || !node.isVisited)){\n            node.isVisited = true;\n            visited.push(node);\n            const {col, row} = node;\n            let nextNode;\n            if(row > 0){\n                nextNode = grid[row-1][col];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(row < grid.length - 1){\n                nextNode = grid[row+1][col];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(col > 0){\n                nextNode = grid[row][col-1];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(col < grid[0].length-1){\n                nextNode = grid[row][col+1];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n        }\n    }\n    return visited;\n}","export function dfs(grid, start, goal){\n    const visited = [];\n    let stack = [start];\n    while(stack.length){\n        const node = stack.pop();\n        if(node.id === goal.id) return visited;\n\n        if(!node.isWall && (node.isStart || !node.isVisited)){\n            node.isVisited = true;\n            visited.push(node);\n            const {col, row} = node;\n            let nextNode;\n            if(row > 0){\n                nextNode = grid[row-1][col];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(row < grid.length - 1){\n                nextNode = grid[row+1][col];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(col > 0){\n                nextNode = grid[row][col-1];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(col < grid[0].length-1){\n                nextNode = grid[row][col+1];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n        }\n    }\n    return visited;\n}","import React, {Component} from 'react';\nimport './navbar.css';\n\nexport default class Navbar extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {value: props.value};\n    }\n\n    handleChange(event){\n        this.setState({value: event.target.value});\n    }\n    \n    toggleDropdown(){\n        document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n\n    selectAlgo(algoName){\n        this.toggleDropdown();\n        document.getElementById(\"startButton\").innerHTML = algoName;\n    }\n\n    render(){\n        return(\n            <div class=\"navbar\">\n                <div class=\"dropdown\">\n                    <button onClick={() => this.toggleDropdown()} class=\"dropbtn\">Select an Algorithm</button>\n                    <div id=\"myDropdown\" class=\"dropdown-content\">\n                        <a href=\"#\" id=\"dijkstraStart\" onClick={() => this.selectAlgo(\"Dijkstra's Algorithm\")}>Dijkstra's Algorithm</a>\n                        <a href=\"#\" id=\"astarStart\" onClick={() => this.selectAlgo(\"A* Search\")}>A* Search</a>\n                        <a href=\"#\" id=\"bfsStart\" onClick={() => this.selectAlgo(\"Breadth-First-Search\")}>BFS</a>\n                        <a href=\"#\" id=\"dfsStart\" onClick={() => this.selectAlgo(\"Depth-First-Search\")}>DFS</a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}    \n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function(event) {\n    if (!event.target.matches('.dropbtn')) {\n    var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n    var i;\n    for (i = 0; i < dropdowns.length; i++) {\n        var openDropdown = dropdowns[i];\n        if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n        }\n    }\n    }\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './pathfindingVisualizer/pathfindingVisualizer';\nimport Navbar from './navbar';\n\nfunction App() {\n  return (    \n    <div className=\"App\">\n\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}