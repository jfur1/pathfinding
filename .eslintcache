[{"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/index.js":"1","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/App.js":"2","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/navbar.jsx":"3","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/pathfindingVisualizer.jsx":"4","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/astar.js":"5","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dijkstra.js":"6","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/Node/Node.jsx":"7","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/bfs.js":"8","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dfs.js":"9"},{"size":167,"mtime":1609794319429,"results":"10","hashOfConfig":"11"},{"size":338,"mtime":1609796579757,"results":"12","hashOfConfig":"11"},{"size":1810,"mtime":1609882307939,"results":"13","hashOfConfig":"11"},{"size":9166,"mtime":1609985568322,"results":"14","hashOfConfig":"11"},{"size":8781,"mtime":1609986303859,"results":"15","hashOfConfig":"11"},{"size":2076,"mtime":1609830298898,"results":"16","hashOfConfig":"11"},{"size":732,"mtime":1609796579759,"results":"17","hashOfConfig":"11"},{"size":1398,"mtime":1609966021968,"results":"18","hashOfConfig":"11"},{"size":1396,"mtime":1609966341759,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1entc3h",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/index.js",[],["43","44"],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/App.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/navbar.jsx",["45","46","47","48"],"import React, {Component} from 'react';\nimport './navbar.css';\n\nexport default class Navbar extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {value: props.value};\n    }\n\n    handleChange(event){\n        this.setState({value: event.target.value});\n    }\n    \n    toggleDropdown(){\n        document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n\n    selectAlgo(algoName){\n        this.toggleDropdown();\n        document.getElementById(\"startButton\").innerHTML = algoName;\n    }\n\n    render(){\n        return(\n            <div class=\"navbar\">\n                <div class=\"dropdown\">\n                    <button onClick={() => this.toggleDropdown()} class=\"dropbtn\">Select an Algorithm</button>\n                    <div id=\"myDropdown\" class=\"dropdown-content\">\n                        <a href=\"#\" id=\"dijkstraStart\" onClick={() => this.selectAlgo(\"Dijkstra's Algorithm\")}>Dijkstra's Algorithm</a>\n                        <a href=\"#\" id=\"astarStart\" onClick={() => this.selectAlgo(\"A* Search\")}>A* Search</a>\n                        <a href=\"#\" id=\"bfsStart\" onClick={() => this.selectAlgo(\"Breadth-First-Search\")}>BFS</a>\n                        <a href=\"#\" id=\"dfsStart\" onClick={() => this.selectAlgo(\"Depth-First-Search\")}>DFS</a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}    \n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function(event) {\n    if (!event.target.matches('.dropbtn')) {\n    var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n    var i;\n    for (i = 0; i < dropdowns.length; i++) {\n        var openDropdown = dropdowns[i];\n        if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n        }\n    }\n    }\n}","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/pathfindingVisualizer.jsx",["49","50","51","52","53","54","55","56","57","58"],"import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getPath} from '../algorithms/dijkstra';\nimport {astar, getAstarPath} from '../algorithms/astar';\nimport './pathfindingVisualizer.css';\nimport {dfs} from '../algorithms/dfs';\nimport { bfs } from '../algorithms/bfs';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      nodes: {},\n      mouseDown: false,\n      algoFinished: true,\n      currentAlgo: null,\n      start: null,\n      target: null\n    };\n  }\n\n  componentDidMount() {\n    const board = this.initGrid();\n    this.setState({grid: board[0], nodes: board[1]});\n  }\n\n  onMouseDown(row, col) {\n    // const newGrid = updateGrid(this.state.grid, row, col);\n    // const newNodes = updateNodes(this.state.nodes, row, col);\n    const board = updateBoard(this.state.grid, this.state.nodes, row, col);\n    this.setState({grid: board[0], nodes: board[1], mouseDown: true});\n  }\n\n  onMouseEnter(row, col) {\n    if (!this.state.mouseDown) return;\n    // const newGrid = updateGrid(this.state.grid, row, col);\n    // const newNodes = updateNodes(this.state.nodes, row, col);\n    const board = updateBoard(this.state.grid, this.state.nodes, row, col);\n    this.setState({grid: board[0], nodes: board[1]});\n  }\n\n  onMouseUp() {\n    this.setState({mouseDown: false});\n  }\n\n  animateSearch(visited, path) {\n    if(visited === false || path.length === 1 || visited.length === 1){\n      console.log(\"No path found.\")\n      this.algoFinished = true;\n      document.getElementById(\"startButton\").disabled = false;\n      document.getElementById(\"clearGridButton\").disabled = false;\n    }else{\n        for (let i = 0; i <= visited.length; i++) {\n          if (i === visited.length) {\n            setTimeout(() => {\n              this.animatePath(path);\n            }, 10 * i);\n            return;\n          }\n          // Visited nodes get animated in 10ms intervals\n          setTimeout(() => {\n            const node = visited[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-visited';\n          }, 10 * i);\n        }\n      }\n    }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 25 * i);\n    }\n    this.algoFinished = true;\n    document.getElementById(\"startButton\").disabled = false;\n    document.getElementById(\"clearGridButton\").disabled = false;\n  }\n\n  visualizeSearch() {\n      const algo = document.getElementById(\"startButton\").innerHTML;\n      if(algo === \"Visualize Algorithm\"){\n        console.log(\"Select an algorithm!\");\n      }\n      else{\n        console.log(\"Selected Algorithm:\", algo);\n        \n        // Clear any visited nodes from the grid\n        this.clearGrid();\n        document.getElementById(\"startButton\").disabled = true;\n        document.getElementById(\"clearGridButton\").disabled = true;\n        this.algoFinished = false;\n\n        const {grid, nodes} = this.state;\n        const start = grid[START_NODE_ROW][START_NODE_COL];\n        const goal = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        var visited = [];\n        var path = [];\n\n        // Select algo based on start button text\n        if(algo === \"A* Search\"){\n          console.log(nodes);\n          // console.log(\"start:\", start)\n          // console.log(\"start-id:\", start.id)\n          // console.log(\"goal:\", goal)\n          visited = astar(nodes, start, goal, visited, grid, []);\n          path = getAstarPath(goal);\n          console.log(\"Astar Visited:\", visited);\n          console.log(\"Astar Path:\", path);\n          this.animateSearch(visited, path);\n        }\n        else if(algo === \"Dijkstra's Algorithm\"){\n          visited = dijkstra(grid, start, goal);\n          path = getPath(goal);\n          console.log(\"Dijkstra Visited:\", visited);\n          console.log(\"Dijkstra Path:\", path);\n          this.animateSearch(visited, path);\n        }else if(algo === \"Depth-First-Search\"){\n          visited = dfs(grid, start, goal);\n          path = getPath(goal);\n          console.log(\"DFS Visited:\", visited);\n          console.log(\"DFS Path:\", path);\n          this.animateSearch(visited, path);\n        }else if(algo === \"Breadth-First-Search\"){\n          visited = bfs(grid, start, goal);\n          path = getPath(goal);\n          console.log(\"BFS Visited:\", visited);\n          console.log(\"BFS Path:\", path);\n          this.animateSearch(visited, path);\n        }\n      }\n  }\n  // Same as init grid, exept walls & start/goal nodes are kept\n  clearGrid() {\n    if(this.algoFinished){\n      for(let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n          this.state.grid[row][col].previousNode = null;\n          this.state.grid[row][col].isVisited = false;\n          if(row === START_NODE_ROW && col === START_NODE_COL){\n            document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          }\n          else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n          }\n          else if(document.getElementById(`node-${row}-${col}`).className === \"node node-visited\"){\n            document.getElementById(`node-${row}-${col}`).className = 'node';\n          }\n          else if(document.getElementById(`node-${row}-${col}`).className === \"node node-shortest-path\"){\n            document.getElementById(`node-${row}-${col}`).className = 'node';\n          }\n        }\n      }\n    }\n  }\n  // Initialize New Grid\n  initGrid = () => {\n    var grid = [];\n    var nodes = {};\n    for (let row = 0; row < 20; row++) {\n      const tmpRow = [];\n      for (let col = 0; col < 50; col++) {\n        var nodeId = `${row}-${col}`, nodeClass, node;\n        var node = newNode(col, row);\n\n        if(row === START_NODE_ROW && col === START_NODE_COL){\n          node.status = \"start\"\n        } \n        else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n          node.status = \"target\"\n        } \n        else node.status = \"node\"\n\n        tmpRow.push(node);\n        nodes[nodeId] = node;\n      }\n      grid.push(tmpRow);\n    }\n    return [grid, nodes];\n  };\n\n  render() {\n    const {grid, mouseDown, algoFinished} = this.state;\n    let tableHTML = \"\";\n    return (\n      <>\n        <div class=\"board\">\n        <div class=\"center\">\n          <button id=\"startButton\" onClick={() => this.visualizeSearch()}>Visualize Algorithm</button>\n        </div>\n        <div class=\"center\">\n          <button id=\"clearGridButton\" onClick={() => this.initGrid()}>Reset Grid</button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      g = {Infinity}\n                      h = {null}\n                      f = {Infinity}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseDown={mouseDown}\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n                      onMouseUp={() => this.onMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        </div>\n      </>\n    );\n  }\n}\n// Create a new Node\nconst newNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    g: Infinity,\n    h: null,\n    f: Infinity,\n    status: null,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    weight: 0,\n    id: `${row}-${col}`\n  };\n};\n// Update our grid state\nconst updateBoard = (grid, nodes, row, col) => {\n  // Create copies of grid & nodes\n  const newGrid = grid.slice();\n  const newNodes = nodes;\n  // If start/goal node, continue\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return [grid, nodes];\n  }\n  // Get the node in question\n  const node = newGrid[row][col];\n  // Create a new node with prop \"isWall\" toggled\n  const newNode = {\n    ...node,\n   isWall: !node.isWall,\n  };\n  // Set status to wall if .isWall === true\n  if(newNode.isWall) newNode.status = \"wall\";\n  else newNode.status = \"node\";\n  // Update the new node in the grid & nodes sets, then return to be updated as state\n  newNodes[`${row}-${col}`] = newNode;\n  newGrid[row][col] = newNode;\n\n  return [newGrid, newNodes];\n};","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/astar.js",["59","60"],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dijkstra.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/Node/Node.jsx",["61","62","63","64","65","66"],"import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      g,\n      h,\n      f,\n      direction,\n      weight,\n      status\n    } = this.props;\n    const type = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${type}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}",["67","68"],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/bfs.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dfs.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":30,"column":25,"nodeType":"75","endLine":30,"endColumn":112},{"ruleId":"73","severity":1,"message":"74","line":31,"column":25,"nodeType":"75","endLine":31,"endColumn":98},{"ruleId":"73","severity":1,"message":"74","line":32,"column":25,"nodeType":"75","endLine":32,"endColumn":107},{"ruleId":"73","severity":1,"message":"74","line":33,"column":25,"nodeType":"75","endLine":33,"endColumn":105},{"ruleId":"76","severity":1,"message":"77","line":148,"column":11,"nodeType":"78","endLine":148,"endColumn":36},{"ruleId":"76","severity":1,"message":"77","line":149,"column":11,"nodeType":"78","endLine":149,"endColumn":36},{"ruleId":"79","severity":1,"message":"80","line":173,"column":39,"nodeType":"81","messageId":"82","endLine":173,"endColumn":48},{"ruleId":"83","severity":1,"message":"84","line":174,"column":13,"nodeType":"81","messageId":"85","endLine":174,"endColumn":17},{"ruleId":"79","severity":1,"message":"86","line":193,"column":29,"nodeType":"81","messageId":"82","endLine":193,"endColumn":41},{"ruleId":"79","severity":1,"message":"87","line":194,"column":9,"nodeType":"81","messageId":"82","endLine":194,"endColumn":18},{"ruleId":"88","severity":1,"message":"89","line":260,"column":29,"nodeType":"90","messageId":"91","endLine":260,"endColumn":31},{"ruleId":"88","severity":1,"message":"89","line":261,"column":5,"nodeType":"90","messageId":"91","endLine":261,"endColumn":7},{"ruleId":"88","severity":1,"message":"92","line":261,"column":5,"nodeType":"90","messageId":"91","endLine":261,"endColumn":7},{"ruleId":"88","severity":1,"message":"92","line":261,"column":32,"nodeType":"90","messageId":"91","endLine":261,"endColumn":34},{"ruleId":"93","severity":1,"message":"94","line":173,"column":22,"nodeType":"81","messageId":"95","endLine":173,"endColumn":26},{"ruleId":"96","severity":1,"message":"97","line":185,"column":21,"nodeType":"98","messageId":"99","endLine":185,"endColumn":23},{"ruleId":"79","severity":1,"message":"100","line":15,"column":7,"nodeType":"81","messageId":"82","endLine":15,"endColumn":8},{"ruleId":"79","severity":1,"message":"101","line":16,"column":7,"nodeType":"81","messageId":"82","endLine":16,"endColumn":8},{"ruleId":"79","severity":1,"message":"102","line":17,"column":7,"nodeType":"81","messageId":"82","endLine":17,"endColumn":8},{"ruleId":"79","severity":1,"message":"103","line":18,"column":7,"nodeType":"81","messageId":"82","endLine":18,"endColumn":16},{"ruleId":"79","severity":1,"message":"104","line":19,"column":7,"nodeType":"81","messageId":"82","endLine":19,"endColumn":13},{"ruleId":"79","severity":1,"message":"105","line":20,"column":7,"nodeType":"81","messageId":"82","endLine":20,"endColumn":13},{"ruleId":"69","replacedBy":"106"},{"ruleId":"71","replacedBy":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'nodeClass' is defined but never used.","Identifier","unusedVar","no-redeclare","'node' is already defined.","redeclared","'algoFinished' is assigned a value but never used.","'tableHTML' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-use-before-define","'grid' was used before it was defined.","usedBeforeDefined","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'g' is assigned a value but never used.","'h' is assigned a value but never used.","'f' is assigned a value but never used.","'direction' is assigned a value but never used.","'weight' is assigned a value but never used.","'status' is assigned a value but never used.",["108"],["109"],"no-global-assign","no-unsafe-negation"]