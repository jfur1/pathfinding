{"version":3,"sources":["pathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","pathfindingVisualizer/pathfindingVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","type","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","astar","start","goal","visited","frontier","getNodes","distanceToFinishNode","PathfindingVisualizer","initGrid","rowCount","state","N_ROWS","colCount","N_COLS","initialGrid","currentRow","newNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Math","abs","isNode","mousePressed","N_ROWS_MOBILE","N_COLS_MOBILE","isRunning","isStartNode","isFinishNode","isWallNode","curRow","curCol","isDesktop","visitedAnimationSpeed","shortestPathAnimationSpeed","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","navigator","userAgent","match","alert","updateAlgoDescription","setState","clearGrid","clearWalls","document","getElementById","classList","toggle","speed","toggleDropdown","innerHTML","isGridClear","newGrid","updateGrid","nodeClassName","slice","heuristic","algo","finish","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","path","unshift","getPath","animate","i","setTimeout","animatePath","nodeClass","href","onClick","visualize","class","toggleSpeed","isDesktopView","toggleView","onMouseLeave","map","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","window","onclick","event","target","matches","dropdowns","getElementsByClassName","openDropdown","contains","remove","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.ed11f8c0.chunk.js","sourcesContent":["\nimport React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    \n    const type = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <td\n        id={`node-${row}-${col}`}\n        className={`node ${type}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></td>\n    );\n  }\n}","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n\n  while (unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (!closestNode.isWall) {\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}","// A* Search Algorithm\n//  - Allowable Moves: [N, E, S, W]\n//  - Inputs\n//      - Adjacency Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - Guarenteed shortest possible path\nexport function astar(grid, start, goal){\n\n    const visited = [];\n    start.distance = 0;\n    const frontier = getNodes(grid);\n\n    while(frontier.length){\n        sortByDistance(frontier);\n        const node = frontier.shift();\n        if(!node.isWall){\n            if(node.distance === Infinity) return false;\n            node.isVisited = true;\n            visited.push(node);\n            if(node === goal) return visited;\n            updateUnvisitedNeighbors(node, grid);\n        }\n    }\n}\n\nfunction getNodes(grid){\n    const nodes = [];\n    for(const row of grid){\n        for(const node of row){\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nfunction sortByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n      neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nexport function getAstarPath(goal) {\n    const path = [];\n    let tmpNode = goal;\n    while (tmpNode !== null) {\n      path.unshift(tmpNode);\n      tmpNode = tmpNode.previousNode;\n    }\n    return path;\n  }","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra} from '../algorithms/dijkstra';\nimport {astar} from '../algorithms/astar';\nimport {dfs} from '../algorithms/dfs';\nimport { bfs } from '../algorithms/bfs';\nimport './pathfindingVisualizer.css';\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(){\n    super();\n    this.state = {\n      grid: [],\n      START_NODE_ROW: 9,\n      START_NODE_COL: 14,\n      FINISH_NODE_ROW: 9,\n      FINISH_NODE_COL: 32,\n      mousePressed: false,\n      N_ROWS: 20,\n      N_COLS: 50,\n      N_ROWS_MOBILE: 10,\n      N_COLS_MOBILE: 20,\n      isRunning: false,\n      isStartNode: false,\n      isFinishNode: false,\n      isWallNode: false,\n      curRow: 0,\n      curCol: 0,\n      isDesktop: true,\n      visitedAnimationSpeed: 10,\n      shortestPathAnimationSpeed: 40,\n    };\n    // Event Handler Prototypes\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.initGrid();\n    var is_mobile = !!navigator.userAgent.match(/iphone|android|blackberry/ig) || false;\n    if(is_mobile) alert('Mobile version still in development. Try using a computer for the best experience!');\n    this.updateAlgoDescription(\"start\");\n    this.setState({grid});\n  }\n\n  toggleIsRunning() {\n    this.setState({isRunning: !this.state.isRunning});\n  }\n\n  toggleView() {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.clearWalls();\n      const isDesktop = !this.state.isDesktop;\n      let grid;\n      if (isDesktop) {\n        grid = this.initGrid(\n          this.state.N_ROWS,\n          this.state.N_COLS,\n        );\n        this.setState({isDesktop, grid});\n      } else {\n        if (\n          this.state.START_NODE_ROW > this.state.N_ROWS_MOBILE ||\n          this.state.FINISH_NODE_ROW > this.state.N_ROWS_MOBILE ||\n          this.state.START_NODE_COL > this.state.N_COLS_MOBILE ||\n          this.state.FINISH_NODE_COL > this.state.N_COLS_MOBILE\n        ) {\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\n        } else {\n          grid = this.initGrid(\n            this.state.N_ROWS_MOBILE,\n            this.state.N_COLS_MOBILE,\n          );\n          this.setState({isDesktop, grid});\n        }\n      }\n    }\n  }\n\n  toggleDropdown(){\n    if(!this.state.isRunning){\n      document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n  }\n\n  toggleSpeed(speed){\n      if(!this.state.isRunning){\n        this.toggleDropdown();\n        document.getElementById(\"animation-speed\").innerHTML = `Animation Speed: \\n${speed}`;\n        if(speed === \"Slow\"){\n          this.setState({visitedAnimationSpeed: 25, shortestPathAnimationSpeed: 55});\n        } else if(speed === \"Medium\"){\n          this.setState({visitedAnimationSpeed: 10, shortestPathAnimationSpeed: 40});\n        } else{\n          this.setState({visitedAnimationSpeed: 5, shortestPathAnimationSpeed: 25});\n        }\n      }\n  }\n\n  /* -------------------- Initialize 2D Grid --------------------- */\n  initGrid = (\n    rowCount = this.state.N_ROWS,\n    colCount = this.state.N_COLS,\n  ) => {\n    const initialGrid = [];\n    for (let row = 0; row < rowCount; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colCount; col++) {\n        currentRow.push(this.newNode(row, col));\n      }\n      initialGrid.push(currentRow);\n    }\n    return initialGrid;\n  };\n\n  newNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart:\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isFinish:\n        row === this.state.FINISH_NODE_ROW &&\n        col === this.state.FINISH_NODE_COL,\n      distance: Infinity,\n      distanceToFinishNode:\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\n        Math.abs(this.state.FINISH_NODE_COL - col),\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      isNode: true,\n    };\n  };\n\n  /* --------------------- Mouse Event Handlers ----------------------- */\n  handleMouseDown(row, col) {\n    if (!this.state.isRunning) {\n      if (this.isGridClear()) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-start'\n        ) {\n          this.setState({\n            mousePressed: true,\n            isStartNode: true,\n            curRow: row,\n            curCol: col,\n          });\n        } else if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-finish'\n        ) {\n          this.setState({\n            mousePressed: true,\n            isFinishNode: true,\n            curRow: row,\n            curCol: col,\n          });\n        } else {\n          const newGrid = updateGrid(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid,\n            mousePressed: true,\n            isWallNode: true,\n            curRow: row,\n            curCol: col,\n          });\n        }\n      } \n    }\n  }\n\n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName === 'node node-visited' ||\n          nodeClassName === 'node node-shortest-path'\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.isRunning) {\n      if (this.state.mousePressed) {\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\n          .className;\n        if (this.state.isStartNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevStartNode = this.state.grid[this.state.curRow][\n              this.state.curCol\n            ];\n            prevStartNode.isStart = false;\n            document.getElementById(\n              `node-${this.state.curRow}-${this.state.curCol}`,\n            ).className = 'node';\n\n            this.setState({curRow: row, curCol: col});\n            const currStartNode = this.state.grid[row][col];\n            currStartNode.isStart = true;\n            document.getElementById(`node-${row}-${col}`).className =\n              'node node-start';\n          }\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\n        } else if (this.state.isFinishNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevFinishNode = this.state.grid[this.state.curRow][\n              this.state.curCol\n            ];\n            prevFinishNode.isFinish = false;\n            document.getElementById(\n              `node-${this.state.curRow}-${this.state.curCol}`,\n            ).className = 'node';\n\n            this.setState({curRow: row, curCol: col});\n            const currFinishNode = this.state.grid[row][col];\n            currFinishNode.isFinish = true;\n            document.getElementById(`node-${row}-${col}`).className =\n              'node node-finish';\n          }\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\n        } else if (this.state.isWallNode) {\n          const newGrid = updateGrid(this.state.grid, row, col);\n          this.setState({grid: newGrid});\n        }\n      }\n    }\n  }\n\n  handleMouseUp(row, col) {\n    if (!this.state.isRunning) {\n      this.setState({mousePressed: false});\n      if (this.state.isStartNode) {\n        const isStartNode = !this.state.isStartNode;\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\n      } else if (this.state.isFinishNode) {\n        const isFinishNode = !this.state.isFinishNode;\n        this.setState({\n          isFinishNode,\n          FINISH_NODE_ROW: row,\n          FINISH_NODE_COL: col,\n        });\n      }\n      this.initGrid();\n    }\n  }\n\n  handleMouseLeave() {\n    if (this.state.isStartNode) {\n      const isStartNode = !this.state.isStartNode;\n      this.setState({isStartNode, mousePressed: false});\n    } else if (this.state.isFinishNode) {\n      const isFinishNode = !this.state.isFinishNode;\n      this.setState({isFinishNode, mousePressed: false});\n    } else if (this.state.isWallNode) {\n      const isWallNode = !this.state.isWallNode;\n      this.setState({isWallNode, mousePressed: false});\n      this.initGrid();\n    }\n  }\n\n  /* ---------------------- Update Grid / Walls --------------------------- */\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let className = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            className !== 'node node-start' &&\n            className !== 'node node-finish' &&\n            className !== 'node node-wall'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (className === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic = 0;\n          }\n          if (className === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let className = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (className === 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n\n  /* ---------------------------------- Animations ----------------------------- */\n\n  visualize(algo){\n    this.updateAlgoDescription(algo);\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {grid} = this.state;\n      const start =\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finish =\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, start, finish);\n          break;\n        case 'astar':\n          visitedNodesInOrder = astar(grid, start, finish);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, start, finish);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, start, finish);\n          break;\n        default:\n          // should not execute\n          break;\n      }\n      const path = getPath(finish);\n      path.push('end');\n      this.animate(visitedNodesInOrder, path);\n    }\n  }\n\n  updateAlgoDescription(algo){\n    if (!this.state.isRunning){\n      if(algo === \"Dijkstra\"){\n        document.getElementById('algoDescription').innerHTML = `${algo}'s Algorithm is <i><b>weighted</b></i> and <i><b>does guarantee</b></i> the shortest path!`;\n      }\n      else if(algo === \"astar\"){\n        document.getElementById('algoDescription').innerHTML = `A* Search is <i><b>weighted</b></i> and <i><b>does guarantee</b></i> the shortest path!`;\n      }\n      else if(algo === \"DFS\"){\n        document.getElementById('algoDescription').innerHTML = `Depth-First Search is <i><b>unweighted</b></i> and <i><b>does not guarantee</b></i> the shortest path!`;\n      }\n      else if(algo === \"BFS\"){\n        document.getElementById('algoDescription').innerHTML = `Breadth-First Search is <i><b>unweighted</b></i> and <i><b>does guarantee</b></i> the shortest path!`;\n      }    else{\n        document.getElementById('algoDescription').innerHTML = \"Select an algorithm to visualize!<br><br>Try drawing some walls or moving the start / target nodes!\";\n      }\n    }\n  }\n\n  animate(visitedNodesInOrder, path) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, this.state.visitedAnimationSpeed * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClass = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClass !== 'node node-start' &&\n          nodeClass !== 'node node-finish'\n        ) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }\n      }, this.state.visitedAnimationSpeed * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      if (path[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * this.state.shortestPathAnimationSpeed);\n      } else {\n        setTimeout(() => {\n          const node = path[i];\n          const nodeClass = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClass !== 'node node-start' &&\n            nodeClass !== 'node node-finish'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }\n        }, i * this.state.shortestPathAnimationSpeed);\n      }\n    }\n  }\n\n  /* ------------------------------- Construct Path ----------------------------- */\n    render() {\n      const {grid, mousePressed} = this.state;\n      return (\n        <div>\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n            <a className=\"navbar-brand\" href=\"https://jfur1.github.io/pathfinding\">\n              <b>PathFinding Visualizer</b>\n            </a>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <a\n                    className=\"nav-link\"\n                    href=\"http://www.github.com/jfur1/pathfinding\">\n                    {' '}\n                    PathFinder Visualizer code{' '}\n                  </a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"https://github.com/jfur1\">\n                    Check Out Other Cool Projects\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <div id=\"programButtons\">\n          <button\n            type=\"button\"\n            className=\"btn btn-danger mr-1\"\n            onClick={() => this.clearGrid()}>\n            Clear Grid\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-warning mr-1\"\n            onClick={() => this.clearWalls()}>\n            Clear Walls\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mr-1\"\n            onClick={() => this.visualize('Dijkstra')}>\n            Dijkstra's\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mr-1\"\n            onClick={() => this.visualize('astar')}>\n            A*\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mr-1\"\n            onClick={() => this.visualize('BFS')}>\n            Breadth-First Search\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mr-1\"\n            onClick={() => this.visualize('DFS')}>\n            Depth-First Search\n          </button>\n          <div class=\"dropdown\">\n              <button id=\"animation-speed\" onClick={() => this.toggleDropdown()} class=\"dropbtn\">Animation Speed: Medium</button>\n              <div id=\"myDropdown\" class=\"dropdown-content\">\n                  <a href=\"#\" id=\"animate-slow\" onClick={() => this.toggleSpeed(\"Slow\")}>Slow</a>\n                  <a href=\"#\" id=\"animate-medium\" onClick={() => this.toggleSpeed(\"Medium\")}>Medium</a>\n                  <a href=\"#\" id=\"animate-fast\" onClick={() => this.toggleSpeed(\"Fast\")}>Fast</a>\n              </div>\n          </div>\n          {this.state.isDesktopView ? (\n            <button\n              type=\"button\"\n              className=\"btn btn-light mr-1\"\n              onClick={() => this.toggleView()}>\n              Mobile View\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-dark mr-1\"\n              onClick={() => this.toggleView()}>\n              Desktop View\n            </button>\n          )}\n          </div>\n          <div id=\"legend\">\n            <ul>\n              <li><div class=\"start-legend\"></div>Start Node</li>\n            </ul>\n            <ul>\n              <li><div class=\"target-legend\"></div>Target Node</li>\n            </ul>\n            <ul>\n              <li><div class=\"unvisited-legend\"></div>Unvisited Node</li>\n            </ul>\n            <ul>\n              <li>\n                <div class=\"visited-legend\"></div>\n                <div class=\"visited-legend-2\"></div>\n                Visited Node\n              </li>\n            </ul>\n            <ul>\n              <li><div class=\"wall-legend\"></div>Wall Node</li>\n            </ul>\n            <ul>\n              <li><div class=\"path-legend\"></div>Shortest-Path Node</li>\n            </ul>\n          </div>\n          <div id=\"algoDescription\"></div>\n          <table\n            className=\"grid-container\"\n            onMouseLeave={() => this.handleMouseLeave()}>\n            <tbody className=\"grid\">\n              {grid.map((row, rowIdx) => {\n                return (\n                  <tr key={rowIdx}>\n                    {row.map((node, nodeIdx) => {\n                      const {row, col, isFinish, isStart, isWall} = node;\n                      return (\n                        <Node\n                          key={nodeIdx}\n                          col={col}\n                          isFinish={isFinish}\n                          isStart={isStart}\n                          isWall={isWall}\n                          mousePressed={mousePressed}\n                          onMouseDown={(row, col) =>\n                            this.handleMouseDown(row, col)\n                          }\n                          onMouseEnter={(row, col) =>\n                            this.handleMouseEnter(row, col)\n                          }\n                          onMouseUp={() => this.handleMouseUp(row, col)}\n                          row={row}></Node>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n  }\n\n  /******************** Create Walls ********************/\n  const updateGrid = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    if (!node.isStart && !node.isFinish && node.isNode) {\n      const newNode = {\n        ...node,\n        isWall: !node.isWall,\n      };\n      newGrid[row][col] = newNode;\n    }\n    return newGrid;\n  };\n\n  // Backtracks from the goal to find the shortest path.\n  // Only works when called after the pathfinding method has executed.\n  function getPath(goal) {\n    const path = [];\n    let node = goal;\n    while (node !== null) {\n      path.unshift(node);\n      node = node.previousNode;\n    }\n    return path;\n  }\n\n  // Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function(event) {\n  if (!event.target.matches('.dropbtn')) {\n  var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n  var i;\n    for (i = 0; i < dropdowns.length; i++) {\n      var openDropdown = dropdowns[i];\n      if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n      }\n    }\n  }\n}","export function bfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    let nextNodesStack = [startNode];\n    while (nextNodesStack.length) {\n      const currentNode = nextNodesStack.shift();\n      if (currentNode === finishNode) return visitedNodesInOrder;\n  \n      if (\n        !currentNode.isWall &&\n        (currentNode.isStart || !currentNode.isVisited)\n      ) {\n        currentNode.isVisited = true;\n        visitedNodesInOrder.push(currentNode);\n        const {col, row} = currentNode;\n        let nextNode;\n        if (row > 0) {\n          nextNode = grid[row - 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (row < grid.length - 1) {\n          nextNode = grid[row + 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col > 0) {\n          nextNode = grid[row][col - 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col < grid[0].length - 1) {\n          nextNode = grid[row][col + 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n      }\n    }\n  }","export function dfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    const nextNodesStack = [];\n    nextNodesStack.push(startNode);\n    while (nextNodesStack.length) {\n      const currentNode = nextNodesStack.pop();\n  \n      if (currentNode === finishNode) {\n        return visitedNodesInOrder;\n      }\n  \n      if (\n        !currentNode.isWall &&\n        (currentNode.isStart || !currentNode.isVisited)\n      ) {\n        currentNode.isVisited = true;\n        visitedNodesInOrder.push(currentNode);\n  \n        const {col, row} = currentNode;\n        let nextNode;\n        if (row > 0) {\n          nextNode = grid[row - 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (row < grid.length - 1) {\n          nextNode = grid[row + 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col > 0) {\n          nextNode = grid[row][col - 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col < grid[0].length - 1) {\n          nextNode = grid[row][col + 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n      }\n    }\n  }","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './pathfindingVisualizer/pathfindingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (    \n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}