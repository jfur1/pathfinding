[{"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/index.js":"1","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/App.js":"2","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/navbar.jsx":"3","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/pathfindingVisualizer.jsx":"4","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/astar.js":"5","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dijkstra.js":"6","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/Node/Node.jsx":"7"},{"size":218,"mtime":1609725533860,"results":"8","hashOfConfig":"9"},{"size":310,"mtime":1609725533860,"results":"10","hashOfConfig":"9"},{"size":1823,"mtime":1609725533861,"results":"11","hashOfConfig":"9"},{"size":7634,"mtime":1609725533862,"results":"12","hashOfConfig":"9"},{"size":6788,"mtime":1609725533860,"results":"13","hashOfConfig":"9"},{"size":2076,"mtime":1609725533860,"results":"14","hashOfConfig":"9"},{"size":732,"mtime":1609725533861,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1entc3h",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/index.js",[],["34","35"],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/App.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/navbar.jsx",["36","37","38","39"],"import React, {Component} from 'react';\nimport './navbar.css';\n\nexport default class Navbar extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {value: props.value};\n    }\n\n    handleChange(event){\n        this.setState({value: event.target.value});\n    }\n    \n    toggleDropdown(){\n        \n        document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n\n    selectAlgo(id){\n        this.toggleDropdown();\n        document.getElementById(\"startButton\").innerHTML = id;\n        return;\n    }\n\n    render(){\n        return(\n            <div class=\"navbar\">\n                <div class=\"dropdown\">\n                    <button onClick={() => this.toggleDropdown()} class=\"dropbtn\">Select an Algorithm</button>\n                    <div id=\"myDropdown\" class=\"dropdown-content\">\n                        <a href=\"#\" id=\"dijkstraStart\" onClick={() => this.selectAlgo(\"Dijkstra's Algorithm\")}>Dijkstra's Algorithm</a>\n                        <a href=\"#\" id=\"astarStart\" onClick={() => this.selectAlgo(\"A* Search\")}>A* Search</a>\n                        <a href=\"#\" id=\"bfsStart\" onClick={() => this.selectAlgo(\"Breadth-First-Search\")}>BFS</a>\n                        <a href=\"#\" id=\"dfsStart\" onClick={() => this.selectAlgo(\"Depth-First-Search\")}>DFS</a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}    \n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function(event) {\n    if (!event.target.matches('.dropbtn')) {\n    var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n    var i;\n    for (i = 0; i < dropdowns.length; i++) {\n        var openDropdown = dropdowns[i];\n        if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n        }\n    }\n    }\n}","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/pathfindingVisualizer.jsx",["40","41","42","43","44","45","46","47","48","49","50","51"],"import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getPath} from '../algorithms/dijkstra';\nimport {astar, getAstarPath} from '../algorithms/astar';\nimport './pathfindingVisualizer.css';\nimport { nodeName } from 'jquery';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      nodes: {},\n      mouseDown: false,\n      algoFinished: true,\n      currentAlgo: null,\n      start: null,\n      target: null\n    };\n  }\n\n  componentDidMount() {\n    const board = this.initGrid();\n    this.setState({grid: board[0], nodes: board[1]});\n  }\n\n  onMouseDown(row, col) {\n    const newGrid = updateGrid(this.state.grid, row, col);\n    const newNodes = updateNodes(this.state.nodes, row, col);\n    this.setState({grid: newGrid, nodes: newNodes, mouseDown: true});\n  }\n\n  onMouseEnter(row, col) {\n    if (!this.state.mouseDown) return;\n    const newGrid = updateGrid(this.state.grid, row, col);\n    const newNodes = updateNodes(this.state.nodes, row, col);\n    this.setState({grid: newGrid, nodes: newNodes});\n  }\n\n  onMouseUp() {\n    this.setState({mouseDown: false});\n  }\n\n  animateSearch(visited, path) {\n    if(visited === false){\n      console.log(\"No path found.\")\n      this.algoFinished = true;\n      document.getElementById(\"startButton\").disabled = false;\n      document.getElementById(\"clearGridButton\").disabled = false;\n    }\n    for (let i = 0; i <= visited.length; i++) {\n      if (i === visited.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      // Visited nodes get animated in 10ms intervals\n      setTimeout(() => {\n        const node = visited[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 35 * i);\n    }\n    this.algoFinished = true;\n    document.getElementById(\"startButton\").disabled = false;\n    document.getElementById(\"clearGridButton\").disabled = false;\n  }\n\n  visualizeSearch() {\n      const algo = document.getElementById(\"startButton\").innerHTML;\n      document.getElementById(\"startButton\").disabled = true;\n      document.getElementById(\"clearGridButton\").disabled = true;\n      console.log(algo);\n      this.algoFinished = false;\n      const {grid, nodes} = this.state;\n      const start = grid[START_NODE_ROW][START_NODE_COL];\n      const goal = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      var visited = [];\n      var path = [];\n      // Select algo based on start button text\n      if(algo === \"A* Search\"){\n        console.log(nodes)\n        // console.log(\"start:\", start)\n        // console.log(\"start-id:\", start.id)\n        // console.log(\"goal:\", goal)\n        visited = astar(nodes, start, goal, visited, grid, []);\n        path = getAstarPath(goal);\n        console.log(\"Visited:\", visited);\n        console.log(\"Path:\", path);\n        this.animateSearch(visited, path);\n      }\n      else if(algo === \"Dijkstra's Algorithm\"){\n        visited = dijkstra(grid, start, goal);\n        path = getPath(goal);\n        this.animateSearch(visited, path);\n      }\n  }\n\n  clearGrid() {\n    if(this.algoFinished){\n      const board = this.initGrid();\n      this.setState({grid: board[0], nodes: board[1]});\n      for(let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n          if(row === START_NODE_ROW && col === START_NODE_COL){\n            //this.nodes[this.start].status = \"start\"\n            document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          }\n          else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n            //this.target.status = \"target\";\n          }\n          else{\n            //this.nodes[`${row}-${col}`].status = \"unvisited\";\n            document.getElementById(`node-${row}-${col}`).className = 'node';\n          }\n        }\n      }\n    }\n  }\n  // Initialize New Grid\n  initGrid = () => {\n    var grid = [];\n    var nodes = {};\n    for (let row = 0; row < 20; row++) {\n      const tmpRow = [];\n      for (let col = 0; col < 50; col++) {\n        var nodeId = `${row}-${col}`, nodeClass, node;\n        var node = newNode(col, row);\n\n        if(row === START_NODE_ROW && col === START_NODE_COL){\n          node.status = \"start\"\n        } \n        else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n          node.status = \"target\"\n        } \n        else node.status = \"node\"\n\n        tmpRow.push(node);\n        nodes[nodeId] = node;\n      }\n      grid.push(tmpRow);\n    }\n    return [grid, nodes];\n  };\n\n  render() {\n    const {grid, mouseDown, algoFinished} = this.state;\n    \n    return (\n      <>\n        <div class=\"center\">\n          <button id=\"startButton\" onClick={() => this.visualizeSearch()}>Visualize Algorithm</button>\n        </div>\n        <div class=\"center\">\n          <button id=\"clearGridButton\" onClick={() => this.clearGrid()}>Clear Grid</button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      g = {Infinity}\n                      h = {null}\n                      f = {Infinity}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseDown={mouseDown}\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n                      onMouseUp={() => this.onMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\n// Create a new Node\nconst newNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    g: Infinity,\n    h: null,\n    f: Infinity,\n    status: null,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    weight: 0,\n    id: `${row}-${col}`\n  };\n};\n\n// Update our grid state\nconst updateGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return grid;\n  }\n  const newNode = {\n    ...node,\n   isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst updateNodes = (nodes, row, col) => {\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return nodes;\n  }\n  const newNodes = nodes;\n  const node = nodes[`${row}-${col}`];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  if(newNode.isWall) newNode.status = \"wall\";\n  newNodes[`${row}-${col}`] = newNode;\n  return newNodes;\n}","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/astar.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dijkstra.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/Node/Node.jsx",["52","53","54","55","56","57"],"import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      g,\n      h,\n      f,\n      direction,\n      weight,\n      status\n    } = this.props;\n    const type = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${type}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":32,"column":25,"nodeType":"64","endLine":32,"endColumn":112},{"ruleId":"62","severity":1,"message":"63","line":33,"column":25,"nodeType":"64","endLine":33,"endColumn":98},{"ruleId":"62","severity":1,"message":"63","line":34,"column":25,"nodeType":"64","endLine":34,"endColumn":107},{"ruleId":"62","severity":1,"message":"63","line":35,"column":25,"nodeType":"64","endLine":35,"endColumn":105},{"ruleId":"65","severity":1,"message":"66","line":6,"column":10,"nodeType":"67","messageId":"68","endLine":6,"endColumn":18},{"ruleId":"65","severity":1,"message":"69","line":145,"column":39,"nodeType":"67","messageId":"68","endLine":145,"endColumn":48},{"ruleId":"70","severity":1,"message":"71","line":146,"column":13,"nodeType":"67","messageId":"72","endLine":146,"endColumn":17},{"ruleId":"65","severity":1,"message":"73","line":165,"column":29,"nodeType":"67","messageId":"68","endLine":165,"endColumn":41},{"ruleId":"74","severity":1,"message":"75","line":230,"column":29,"nodeType":"76","messageId":"77","endLine":230,"endColumn":31},{"ruleId":"74","severity":1,"message":"75","line":231,"column":5,"nodeType":"76","messageId":"77","endLine":231,"endColumn":7},{"ruleId":"74","severity":1,"message":"78","line":231,"column":5,"nodeType":"76","messageId":"77","endLine":231,"endColumn":7},{"ruleId":"74","severity":1,"message":"78","line":231,"column":32,"nodeType":"76","messageId":"77","endLine":231,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":243,"column":29,"nodeType":"76","messageId":"77","endLine":243,"endColumn":31},{"ruleId":"74","severity":1,"message":"75","line":244,"column":5,"nodeType":"76","messageId":"77","endLine":244,"endColumn":7},{"ruleId":"74","severity":1,"message":"78","line":244,"column":5,"nodeType":"76","messageId":"77","endLine":244,"endColumn":7},{"ruleId":"74","severity":1,"message":"78","line":244,"column":32,"nodeType":"76","messageId":"77","endLine":244,"endColumn":34},{"ruleId":"65","severity":1,"message":"79","line":15,"column":7,"nodeType":"67","messageId":"68","endLine":15,"endColumn":8},{"ruleId":"65","severity":1,"message":"80","line":16,"column":7,"nodeType":"67","messageId":"68","endLine":16,"endColumn":8},{"ruleId":"65","severity":1,"message":"81","line":17,"column":7,"nodeType":"67","messageId":"68","endLine":17,"endColumn":8},{"ruleId":"65","severity":1,"message":"82","line":18,"column":7,"nodeType":"67","messageId":"68","endLine":18,"endColumn":16},{"ruleId":"65","severity":1,"message":"83","line":19,"column":7,"nodeType":"67","messageId":"68","endLine":19,"endColumn":13},{"ruleId":"65","severity":1,"message":"84","line":20,"column":7,"nodeType":"67","messageId":"68","endLine":20,"endColumn":13},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'nodeName' is defined but never used.","Identifier","unusedVar","'nodeClass' is defined but never used.","no-redeclare","'node' is already defined.","redeclared","'algoFinished' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'g' is assigned a value but never used.","'h' is assigned a value but never used.","'f' is assigned a value but never used.","'direction' is assigned a value but never used.","'weight' is assigned a value but never used.","'status' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]