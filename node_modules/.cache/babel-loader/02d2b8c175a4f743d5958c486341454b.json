{"ast":null,"code":"// Dijkstra's Algorithm:\n//  - Inputs:\n//      - 2D Grid Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - List of nodes representing the shortest possible path, if one exists.\nexport function dijkstra(grid, start, goal) {\n  const visited = [];\n  start.g = 0;\n  const frontier = getNodes(grid);\n\n  while (!!frontier.length) {\n    sortNodes(frontier); // Guarenteed to be next closest node since we've just sorted the unvisited nodes by distance\n\n    const node = frontier.shift(); // Skip checks for any walls\n\n    if (node.isWall) continue; // If the closest node is infinite distance, then no path exists to our goal\n\n    if (node.g === Infinity) return visited;\n    node.isVisited = true;\n    visited.push(node);\n    if (node === goal) return visited;\n    updateNeighborCosts(node, grid);\n  }\n} // Sort the nodes by distance\n\nfunction sortNodes(frontier) {\n  frontier.sort((nodeA, nodeB) => nodeA.g - nodeB.g);\n}\n\nfunction updateNeighborCosts(node, grid) {\n  const unvisitedNeighbors = getNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.g = node.g + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the goal to find the shortest path.\n\n\nexport function getPath(goal) {\n  const path = [];\n  let tmpNode = goal;\n\n  while (tmpNode !== null) {\n    path.unshift(tmpNode);\n    tmpNode = tmpNode.previousNode;\n  }\n\n  return path;\n}","map":{"version":3,"sources":["/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","start","goal","visited","g","frontier","getNodes","length","sortNodes","node","shift","isWall","Infinity","isVisited","push","updateNeighborCosts","sort","nodeA","nodeB","unvisitedNeighbors","getNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","getPath","path","tmpNode","unshift"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AACxC,QAAMC,OAAO,GAAG,EAAhB;AACAF,EAAAA,KAAK,CAACG,CAAN,GAAU,CAAV;AACA,QAAMC,QAAQ,GAAGC,QAAQ,CAACN,IAAD,CAAzB;;AACA,SAAO,CAAC,CAACK,QAAQ,CAACE,MAAlB,EAA0B;AACxBC,IAAAA,SAAS,CAACH,QAAD,CAAT,CADwB,CAExB;;AACA,UAAMI,IAAI,GAAGJ,QAAQ,CAACK,KAAT,EAAb,CAHwB,CAKxB;;AACA,QAAID,IAAI,CAACE,MAAT,EAAiB,SANO,CAOxB;;AACA,QAAIF,IAAI,CAACL,CAAL,KAAWQ,QAAf,EAAyB,OAAOT,OAAP;AAEzBM,IAAAA,IAAI,CAACI,SAAL,GAAiB,IAAjB;AACAV,IAAAA,OAAO,CAACW,IAAR,CAAaL,IAAb;AACA,QAAIA,IAAI,KAAKP,IAAb,EAAmB,OAAOC,OAAP;AACnBY,IAAAA,mBAAmB,CAACN,IAAD,EAAOT,IAAP,CAAnB;AACD;AACF,C,CAED;;AACA,SAASQ,SAAT,CAAmBH,QAAnB,EAA6B;AAC3BA,EAAAA,QAAQ,CAACW,IAAT,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACb,CAAN,GAAUc,KAAK,CAACd,CAAhD;AACD;;AAED,SAASW,mBAAT,CAA6BN,IAA7B,EAAmCT,IAAnC,EAAyC;AACvC,QAAMmB,kBAAkB,GAAGC,YAAY,CAACX,IAAD,EAAOT,IAAP,CAAvC;;AACA,OAAK,MAAMqB,QAAX,IAAuBF,kBAAvB,EAA2C;AACzCE,IAAAA,QAAQ,CAACjB,CAAT,GAAaK,IAAI,CAACL,CAAL,GAAS,CAAtB;AACAiB,IAAAA,QAAQ,CAACC,YAAT,GAAwBb,IAAxB;AACD;AACF;;AAED,SAASW,YAAT,CAAsBX,IAAtB,EAA4BT,IAA5B,EAAkC;AAChC,QAAMuB,SAAS,GAAG,EAAlB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAahB,IAAnB;AACA,MAAIgB,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACT,IAAV,CAAed,IAAI,CAACyB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGzB,IAAI,CAACO,MAAL,GAAc,CAAxB,EAA2BgB,SAAS,CAACT,IAAV,CAAed,IAAI,CAACyB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACT,IAAV,CAAed,IAAI,CAACyB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGxB,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,GAAiB,CAA3B,EAA8BgB,SAAS,CAACT,IAAV,CAAed,IAAI,CAACyB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACG,MAAV,CAAiBL,QAAQ,IAAI,CAACA,QAAQ,CAACR,SAAvC,CAAP;AACD;;AAED,SAASP,QAAT,CAAkBN,IAAlB,EAAwB;AACtB,QAAM2B,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMF,GAAX,IAAkBzB,IAAlB,EAAwB;AACtB,SAAK,MAAMS,IAAX,IAAmBgB,GAAnB,EAAwB;AACtBE,MAAAA,KAAK,CAACb,IAAN,CAAWL,IAAX;AACD;AACF;;AACD,SAAOkB,KAAP;AACD,C,CAED;;;AAEA,OAAO,SAASC,OAAT,CAAiB1B,IAAjB,EAAuB;AAC5B,QAAM2B,IAAI,GAAG,EAAb;AACA,MAAIC,OAAO,GAAG5B,IAAd;;AACA,SAAO4B,OAAO,KAAK,IAAnB,EAAyB;AACvBD,IAAAA,IAAI,CAACE,OAAL,CAAaD,OAAb;AACAA,IAAAA,OAAO,GAAGA,OAAO,CAACR,YAAlB;AACD;;AACD,SAAOO,IAAP;AACD","sourcesContent":["// Dijkstra's Algorithm:\n//  - Inputs:\n//      - 2D Grid Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - List of nodes representing the shortest possible path, if one exists.\n\nexport function dijkstra(grid, start, goal) {\n    const visited = [];\n    start.g = 0;\n    const frontier = getNodes(grid);\n    while (!!frontier.length) {\n      sortNodes(frontier);\n      // Guarenteed to be next closest node since we've just sorted the unvisited nodes by distance\n      const node = frontier.shift();\n      \n      // Skip checks for any walls\n      if (node.isWall) continue;\n      // If the closest node is infinite distance, then no path exists to our goal\n      if (node.g === Infinity) return visited;\n\n      node.isVisited = true;\n      visited.push(node);\n      if (node === goal) return visited;\n      updateNeighborCosts(node, grid);\n    }\n  }\n  \n  // Sort the nodes by distance\n  function sortNodes(frontier) {\n    frontier.sort((nodeA, nodeB) => nodeA.g - nodeB.g);\n  }\n  \n  function updateNeighborCosts(node, grid) {\n    const unvisitedNeighbors = getNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.g = node.g + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the goal to find the shortest path.\n\n  export function getPath(goal) {\n    const path = [];\n    let tmpNode = goal;\n    while (tmpNode !== null) {\n      path.unshift(tmpNode);\n      tmpNode = tmpNode.previousNode;\n    }\n    return path;\n  }"]},"metadata":{},"sourceType":"module"}