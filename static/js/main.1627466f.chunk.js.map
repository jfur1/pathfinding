{"version":3,"sources":["algorithms/unweightedSearch.js","pathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","pathfindingVisualizer/pathfindingVisualizer.jsx","navbar.jsx","App.js","index.js"],"names":["module","exports","nodes","start","target","visited","grid","algoName","structure","node","shift","pop","push","id","status","neighbor","coords","split","x","parseInt","y","neighbors","toString","unshift","getNeighbors","forEach","previousNode","length","Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","type","g","h","f","direction","weight","className","Component","dijkstra","goal","frontier","getNodes","sortNodes","Infinity","isVisited","updateNeighborCosts","sort","nodeA","nodeB","unvisitedNeighbors","filter","getPath","path","tmpNode","closestNode","index","i","splice","updateNeighbors","heuristic","updateNode","tmpTarget","trueStart","trueTarget","startCoords","targetCoords","nodeAx","nodeAy","nodeBx","nodeBy","getPathCost","nodeAcoords","map","nodeBcoords","delta_x","Math","abs","delta_y","manhattanDistance","dist","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","initGrid","tmpRow","nodeId","newNode","state","mouseDown","algoFinished","currentAlgo","board","setState","newGrid","updateGrid","newNodes","updateNodes","console","log","document","getElementById","disabled","setTimeout","animatePath","algo","innerHTML","explored","Object","keys","astar","getAstarPath","animateSearch","unweightedSearch","class","onClick","visualizeSearch","clearGrid","rowIdx","nodeIdx","slice","Navbar","value","event","classList","toggle","toggleDropdown","href","selectAlgo","window","onclick","matches","dropdowns","getElementsByClassName","openDropdown","contains","remove","App","ReactDOM","render"],"mappings":"8FA2CAA,EAAOC,QA3CP,SAA0BC,EAAOC,EAAOC,EAAQC,EAASC,EAAMC,GAC3D,IAAIJ,IAAUC,GAAUD,IAAUC,EAC9B,OAAO,EAGX,IAFA,IAAII,EAAY,CAACN,EAAMC,IAH6C,aAMhE,IAAIM,EAAoB,QAAbF,EAAqBC,EAAUE,QAAUF,EAAUG,MAI9D,GAHAN,EAAQO,KAAKH,GACG,QAAbF,IAAoBF,EAAQI,EAAKI,KAAM,GAC1CJ,EAAKK,OAAS,UACXL,EAAKI,KAAOT,EACX,MAAM,CAAN,EAAOC,IAcnB,SAAsBQ,EAAIX,EAAOI,EAAMC,GACnC,IAIIQ,EAJAC,EAASH,EAAGI,MAAM,KAClBC,EAAIC,SAASH,EAAO,IACpBI,EAAID,SAASH,EAAO,IACpBK,EAAY,GAEbf,EAAKY,EAAE,IAAMZ,EAAKY,EAAE,GAAGE,IAEQ,SAA3BlB,EADHa,EAAQ,WAAOG,EAAI,GAAGI,WAAd,YAA4BF,EAAEE,aACnBR,SACC,QAAbP,EACCc,EAAUT,KAAKG,GAEfM,EAAUE,QAAQR,KAxBVS,CAAaf,EAAKI,GAAIX,EAAOI,EAAMC,GACzCkB,SAAQ,SAAAV,GACXV,EAAQU,KACQ,QAAbR,IAAoBF,EAAQU,IAAY,GAC3Cb,EAAMa,GAAUW,aAAejB,EAAKI,GACpCL,EAAUI,KAAKV,EAAMa,SAb1BP,EAAUmB,QAAO,CAAC,IAAD,wCAiBvB,OAAO,I,yNCnBUC,G,6KACT,IAAD,EAgBHC,KAAKC,MAdPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,QACAC,EALK,EAKLA,OACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,aACAC,EARK,EAQLA,UACAC,EATK,EASLA,IAQIC,GAjBC,EAULC,EAVK,EAWLC,EAXK,EAYLC,EAZK,EAaLC,UAbK,EAcLC,OAdK,EAeL9B,OAEWkB,EACT,cACAC,EACA,aACAC,EACA,YACA,IAEJ,OACE,qBACErB,GAAE,eAAUyB,EAAV,YAAiBP,GACnBc,UAAS,eAAUN,GACnBJ,YAAa,kBAAMA,EAAYG,EAAKP,IACpCK,aAAc,kBAAMA,EAAaE,EAAKP,IACtCM,UAAW,kBAAMA,W,GAhCSS,c,OCK3B,SAASC,EAASzC,EAAMH,EAAO6C,GAClC,IAAM3C,EAAU,GAChBF,EAAMqC,EAAI,EAEV,IADA,IAAMS,EAyCR,SAAkB3C,GAChB,IADsB,EAChBJ,EAAQ,GADQ,cAEJI,GAFI,IAEtB,2BAAwB,CAAC,IAAD,EAAbgC,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd7B,EAAa,QACtBP,EAAMU,KAAKH,IAFS,gCAFF,8BAOtB,OAAOP,EAhDUgD,CAAS5C,GACjB2C,EAAStB,QAAQ,CACxBwB,EAAUF,GAEV,IAAMxC,EAAOwC,EAASvC,QAGtB,IAAID,EAAKyB,OAAT,CAEA,GAAIzB,EAAK+B,IAAMY,IAAU,OAAO/C,EAIhC,GAFAI,EAAK4C,WAAY,EACjBhD,EAAQO,KAAKH,GACTA,IAASuC,EAAM,OAAO3C,EAC1BiD,EAAoB7C,EAAMH,KAK9B,SAAS6C,EAAUF,GACjBA,EAASM,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMhB,EAAIiB,EAAMjB,KAGlD,SAASc,EAAoB7C,EAAMH,GACjC,IADuC,EACjCoD,EAOR,SAAsBjD,EAAMH,GAC1B,IAAMe,EAAY,GACXU,EAAYtB,EAAZsB,IAAKO,EAAO7B,EAAP6B,IACRA,EAAM,GAAGjB,EAAUT,KAAKN,EAAKgC,EAAM,GAAGP,IACtCO,EAAMhC,EAAKqB,OAAS,GAAGN,EAAUT,KAAKN,EAAKgC,EAAM,GAAGP,IACpDA,EAAM,GAAGV,EAAUT,KAAKN,EAAKgC,GAAKP,EAAM,IACxCA,EAAMzB,EAAK,GAAGqB,OAAS,GAAGN,EAAUT,KAAKN,EAAKgC,GAAKP,EAAM,IAC7D,OAAOV,EAAUsC,QAAO,SAAA5C,GAAQ,OAAKA,EAASsC,aAdnB7B,CAAaf,EAAMH,GADP,cAEhBoD,GAFgB,IAEvC,2BAA2C,CAAC,IAAjC3C,EAAgC,QACzCA,EAASyB,EAAI/B,EAAK+B,EAAI,EACtBzB,EAASW,aAAejB,GAJa,+BA8BlC,SAASmD,EAAQZ,GAGtB,IAFA,IAAMa,EAAO,GACTC,EAAUd,EACK,OAAZc,GACLD,EAAKtC,QAAQuC,GACbA,EAAUA,EAAQpC,aAEpB,OAAOmC,ECrCX,SAASE,EAAY7D,EAAO+C,GAExB,IADA,IAAIxC,EAAMuD,EACFC,EAAI,EAAGA,EAAIhB,EAAStB,OAAQsC,MAC5BxD,GAAQA,EAAKiC,EAAIxC,EAAM+C,EAASgB,IAAIvB,GAIhCjC,EAAKiC,IAAMxC,EAAM+C,EAASgB,IAAIvB,GAC/BjC,EAAKgC,EAAIvC,EAAM+C,EAASgB,IAAIxB,KAJ/BhC,EAAOP,EAAM+C,EAASgB,IACtBD,EAAQC,GAUhB,OADAhB,EAASiB,OAAOF,EAAO,GAChBvD,EAGX,SAAS0D,EAAgBjE,EAAOO,EAAMH,EAAMH,EAAOC,EAAQgE,GACvD,IADiE,EAC7D/C,EA2BR,SAAsBR,EAAIX,EAAOI,GAC7B,IAIIS,EAJAC,EAASH,EAAGI,MAAM,KAClBC,EAAIC,SAASH,EAAO,IACpBI,EAAID,SAASH,EAAO,IACpBK,EAAY,GAGbf,EAAKY,EAAE,IAAMZ,EAAKY,EAAE,GAAGE,IAEQ,SAA3BlB,EADHa,EAAQ,WAAOG,EAAE,GAAGI,WAAZ,YAA0BF,EAAEE,aACjBR,QAAmBO,EAAUT,KAAKG,GAGtDT,EAAKY,EAAE,IAAMZ,EAAKY,EAAE,GAAGE,IAEQ,SAA3BlB,EADHa,EAAQ,WAAOG,EAAE,GAAGI,WAAZ,YAA0BF,EAAEE,aACjBR,QAAmBO,EAAUT,KAAKG,GAEtDT,EAAKY,GAAGE,EAAE,IAEqB,SAA3BlB,EADHa,EAAQ,UAAMG,EAAEI,WAAR,aAAuBF,EAAI,GAAGE,aACnBR,QAAmBO,EAAUT,KAAKG,GAEtDT,EAAKY,GAAGE,EAAE,IAEqB,SAA3BlB,EADHa,EAAQ,UAAMG,EAAEI,WAAR,aAAuBF,EAAI,GAAGE,aACnBR,QAAmBO,EAAUT,KAAKG,GAEzD,OAAOM,EAnDSG,CAAaf,EAAKI,GAAIX,EAAOI,GADoB,cAE7Ce,GAF6C,IAEjE,IAAI,EAAJ,qBAA8B,CAAC,IAAvBN,EAAsB,QACvBX,EAGCiE,EAAW5D,EAAMP,EAAMa,GAAWb,EAAMC,EAAMU,IAAKX,EAAME,EAAOS,IAAKX,EAAOI,EAAM8D,GAGlFC,EAAW5D,EAAMP,EAAMa,KATkC,+BAcrE,SAASsD,EAAW5D,EAAM6D,EAAWC,EAAWC,EAAYtE,EAAOI,EAAM8D,GACrE,IAAIP,EAwCR,SAAqBL,EAAOC,GACxB,IAAIgB,EAAcjB,EAAM3C,GAAGI,MAAM,KAC7ByD,EAAejB,EAAM5C,GAAGI,MAAM,KAC9B0D,EAASxD,SAASsD,EAAY,IAC9BG,EAASzD,SAASsD,EAAY,IAC9BI,EAAS1D,SAASuD,EAAa,IAC/BI,EAAS3D,SAASuD,EAAa,IAEnC,GAAGG,EAASF,GAAUC,IAAWE,EAAO,CACpC,GAAuB,MAApBtB,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,KAAM,KACzC,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,KACnD,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,KACnD,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,IAAK,KAAM,KACxD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,UAEpD,GAAGkC,EAASF,GAAUC,IAAWE,EAAO,CACzC,GAAuB,MAApBtB,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,IAAK,KAAM,KACnD,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,KACnD,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,KACnD,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,KAAM,KAC9C,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAEzD,GAAGmC,EAASF,GAAUD,IAAWE,EAAO,CACpC,GAAuB,MAApBrB,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,KAC9C,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,IAAK,KAAM,KACxD,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,KAAM,KAC9C,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,KACnD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,UAEpD,GAAGmC,EAASF,GAAUD,IAAWE,EAAO,CACzC,GAAuB,MAApBrB,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,KAC9C,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,KAAM,KAC9C,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAI,IAAI,KAAM,KACtD,GAAuB,MAApBa,EAAMb,UAAmB,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,KACnD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,KAChD,GAAuB,OAApBa,EAAMb,UAAoB,MAAO,CAAC,IAAK,KAAM,MAtF9CoC,CAAYtE,EAAM6D,GAEzBA,EAAU7B,IAAG6B,EAAU7B,EAwF/B,SAA2Be,EAAOC,GAC9B,IAAIuB,EAAcxB,EAAM3C,GAAGI,MAAM,KAAKgE,KAAI,SAAA/D,GAAC,OAAIC,SAASD,MACpDgE,EAAczB,EAAM5C,GAAGI,MAAM,KAAKgE,KAAI,SAAA/D,GAAC,OAAIC,SAASD,MACpDyD,EAASK,EAAY,GACrBH,EAASK,EAAY,GACrBN,EAASI,EAAY,GACrBF,EAASI,EAAY,GAErBC,EAAUC,KAAKC,IAAIV,EAASE,GAC5BS,EAAUF,KAAKC,IAAIT,EAASE,GAEhC,OAAQK,EAAUG,EAnGaC,CAAkBjB,EAAWE,IAC5D,IAAIgB,EAAO/E,EAAK+B,EAAI8B,EAAU1B,OAASiB,EAAK,GACzC2B,EAAOlB,EAAU9B,IAChB8B,EAAU9B,EAAIgD,EACdlB,EAAU5B,EAAI4B,EAAU9B,EAAI8B,EAAU7B,EACtC6B,EAAU5C,aAAejB,EACzB6D,EAAUT,KAAOA,EAAK,GACtBS,EAAU3B,UAAYkB,EAAK,I,iBCpE7B4B,G,MAAiB,IACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAGHC,E,kDACnB,aAAe,IAAD,8BACZ,gBAuIFC,SAAW,WAGT,IAFA,IAAIxF,EAAO,GACPJ,EAAQ,GACHoC,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAMyD,EAAS,GACNhE,EAAM,EAAGA,EAAM,GAAIA,IAAO,CACjC,IACItB,EADAuF,EAAM,UAAM1D,EAAN,YAAaP,IACnBtB,EAAOwF,EAAQlE,EAAKO,IAGjBxB,OADJwB,IAAQmD,GAAkB1D,IAAQ2D,EACrB,QAERpD,IAAQqD,GAAmB5D,IAAQ6D,EAC3B,SAEG,OAEnBG,EAAOnF,KAAKH,GACZP,EAAM8F,GAAUvF,EAElBH,EAAKM,KAAKmF,GAEZ,MAAO,CAACzF,EAAMJ,IA5Jd,EAAKgG,MAAQ,CACX5F,KAAM,GACNJ,MAAO,GACPiG,WAAW,EACXC,cAAc,EACdC,YAAa,KACblG,MAAO,KACPC,OAAQ,MATE,E,gEAcZ,IAAMkG,EAAQzE,KAAKiE,WACnBjE,KAAK0E,SAAS,CAACjG,KAAMgG,EAAM,GAAIpG,MAAOoG,EAAM,O,kCAGlChE,EAAKP,GACf,IAAMyE,EAAUC,EAAW5E,KAAKqE,MAAM5F,KAAMgC,EAAKP,GAC3C2E,EAAWC,EAAY9E,KAAKqE,MAAMhG,MAAOoC,EAAKP,GACpDF,KAAK0E,SAAS,CAACjG,KAAMkG,EAAStG,MAAOwG,EAAUP,WAAW,M,mCAG/C7D,EAAKP,GAChB,GAAKF,KAAKqE,MAAMC,UAAhB,CACA,IAAMK,EAAUC,EAAW5E,KAAKqE,MAAM5F,KAAMgC,EAAKP,GAC3C2E,EAAWC,EAAY9E,KAAKqE,MAAMhG,MAAOoC,EAAKP,GACpDF,KAAK0E,SAAS,CAACjG,KAAMkG,EAAStG,MAAOwG,O,kCAIrC7E,KAAK0E,SAAS,CAACJ,WAAW,M,oCAGd9F,EAASwD,GAAO,IAAD,QACZ,IAAZxD,IACDuG,QAAQC,IAAI,kBACZhF,KAAKuE,cAAe,EACpBU,SAASC,eAAe,eAAeC,UAAW,EAClDF,SAASC,eAAe,mBAAmBC,UAAW,GAExD,IAP2B,eAOlB/C,GACP,GAAIA,IAAM5D,EAAQsB,OAIhB,OAHAsF,YAAW,WACT,EAAKC,YAAYrD,KAChB,GAAKI,GACF,CAAN,UAGFgD,YAAW,WACT,IAAMxG,EAAOJ,EAAQ4D,GACrB6C,SAASC,eAAT,eAAgCtG,EAAK6B,IAArC,YAA4C7B,EAAKsB,MAAOc,UACtD,sBACD,GAAKoB,IAZDA,EAAI,EAAGA,GAAK5D,EAAQsB,OAAQsC,IAAK,CAAC,IAAD,IAAjCA,GAAiC,qC,kCAgBhCJ,GACV,IADiB,IAAD,WACPI,GACPgD,YAAW,WACT,IAAMxG,EAAOoD,EAAKI,GAClB6C,SAASC,eAAT,eAAgCtG,EAAK6B,IAArC,YAA4C7B,EAAKsB,MAAOc,UACtD,4BACD,GAAKoB,IALDA,EAAI,EAAGA,EAAIJ,EAAKlC,OAAQsC,IAAM,EAA9BA,GAOTpC,KAAKuE,cAAe,EACpBU,SAASC,eAAe,eAAeC,UAAW,EAClDF,SAASC,eAAe,mBAAmBC,UAAW,I,wCAIpD,IAAMG,EAAOL,SAASC,eAAe,eAAeK,UACxC,wBAATD,EACDP,QAAQC,IAAI,yBAGZC,SAASC,eAAe,eAAeC,UAAW,EAClDF,SAASC,eAAe,mBAAmBC,UAAW,GAExDnF,KAAKuE,cAAe,EATN,MAUQvE,KAAKqE,MAApB5F,EAVO,EAUPA,KAAMJ,EAVC,EAUDA,MACPC,EAAQG,EAAKmF,IAAgBC,IAC7B1C,EAAO1C,EAAKqF,IAAiBC,IAC/BvF,EAAU,GACVwD,EAAO,GAEC,cAATsD,GACDP,QAAQC,IAAI3G,GAIZG,EDnGD,SAAeH,EAAOC,EAAO6C,EAAMqE,EAAU/G,EAAM8D,GACtD,IAAIjE,IAAU6C,GAAQ7C,IAAU6C,EAC5B,OAAO,EACX9C,EAAMC,EAAMU,IAAI2B,EAAI,EACpBtC,EAAMC,EAAMU,IAAI6B,EAAI,EACpBxC,EAAMC,EAAMU,IAAI8B,UAAY,IAC5B,IAAIM,EAAWqE,OAAOC,KAAKrH,GAE3B,IADA0G,QAAQC,IAAI,YAAa5D,GACnBA,EAAStB,QAAO,CAIlB,IAFA,IAAIlB,EAAOsD,EAAY7D,EAAO+C,GAER,SAAhBxC,EAAKK,QAAsBmC,EAAStB,QACtClB,EAAOsD,EAAY7D,EAAO+C,GAE9B,GAAGxC,EAAK+B,IAAMY,IAAU,OAAO,EAG/B,GAFAiE,EAASzG,KAAKH,GACdA,EAAKK,OAAS,UACXL,EAAKI,KAAOmC,EAAKnC,GAAI,OAAOwG,EAE/BlD,EAAgBjE,EAAOO,EAAMH,EAAMH,EAAO6C,EAAMoB,IC+EtCoD,CAAMtH,EAAOC,EAAO6C,EAAM3C,EAASC,EAAM,IACnDuD,ED+DD,SAAsBb,GAGzB,IAFA,IAAMa,EAAO,GACTC,EAAUd,EACK,OAAZc,GACLD,EAAKtC,QAAQuC,GACbA,EAAUA,EAAQpC,aAEpB,OAAOmC,ECtEI4D,CAAazE,GACpB4D,QAAQC,IAAI,WAAYxG,GACxBuG,QAAQC,IAAI,QAAShD,GACrBhC,KAAK6F,cAAcrH,EAASwD,IAEb,yBAATsD,GACN9G,EAAU0C,EAASzC,EAAMH,EAAO6C,GAChCa,EAAOD,EAAQZ,GACfnB,KAAK6F,cAAcrH,EAASwD,IACZ,uBAATsD,GACP9G,EAAUsH,2BAAiBzH,EAAOC,EAAO6C,EAAM3C,EAASC,EAAM,OAC9DuD,EAAOD,EAAQZ,GACfnB,KAAK6F,cAAcrH,EAASwD,IACZ,yBAATsD,IACP9G,EAAUsH,2BAAiBzH,EAAOC,EAAO6C,EAAM3C,EAASC,EAAM,OAC9DuD,EAAOD,EAAQZ,GACfnB,KAAK6F,cAAcrH,EAASwD,M,kCAKhC,GAAGhC,KAAKuE,aAAa,CACnB,IAAME,EAAQzE,KAAKiE,WACnBjE,KAAK0E,SAAS,CAACjG,KAAMgG,EAAM,GAAIpG,MAAOoG,EAAM,KAC5C,IAAI,IAAIhE,EAAM,EAAGA,EAAM,GAAIA,IACzB,IAAK,IAAIP,EAAM,EAAGA,EAAM,GAAIA,IAGxB+E,SAASC,eAAT,eAAgCzE,EAAhC,YAAuCP,IAAOc,UAF7CP,IAAQmD,GAAkB1D,IAAQ2D,EAEuB,kBAEpDpD,IAAQqD,GAAmB5D,IAAQ6D,EACiB,mBAKA,U,+BAgC1D,IAAD,SACiC/D,KAAKqE,MAAtC5F,EADA,EACAA,KAAM6F,EADN,EACMA,UADN,EACiBC,aAExB,OACE,mCAEE,sBAAKwB,MAAM,QAAX,UACA,qBAAKA,MAAM,SAAX,SACE,wBAAQ/G,GAAG,cAAcgH,QAAS,kBAAM,EAAKC,mBAA7C,mCAEF,qBAAKF,MAAM,SAAX,SACE,wBAAQ/G,GAAG,kBAAkBgH,QAAS,kBAAM,EAAKE,aAAjD,0BAEF,qBAAKlF,UAAU,OAAf,SACGvC,EAAK2E,KAAI,SAAC3C,EAAK0F,GACd,OACE,8BACG1F,EAAI2C,KAAI,SAACxE,EAAMwH,GAAa,IACpB3F,EAAuC7B,EAAvC6B,IAAKP,EAAkCtB,EAAlCsB,IAAKC,EAA6BvB,EAA7BuB,SAAUC,EAAmBxB,EAAnBwB,QAASC,EAAUzB,EAAVyB,OACpC,OACE,cAAC,EAAD,CAEEH,IAAKA,EACLS,EAAKY,IACLX,EAAK,KACLC,EAAKU,IACLpB,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRiE,UAAWA,EACXhE,YAAa,SAACG,EAAKP,GAAN,OAAc,EAAKI,YAAYG,EAAKP,IACjDK,aAAc,SAACE,EAAKP,GAAN,OAAc,EAAKK,aAAaE,EAAKP,IACnDM,UAAW,kBAAM,EAAKA,aACtBC,IAAKA,GAZA2F,OALHD,iB,GAlL2BlF,aAkN7CmD,EAAU,SAAClE,EAAKO,GACpB,MAAO,CACLP,MACAO,MACAL,QAASK,IAAQmD,GAAkB1D,IAAQ2D,EAC3C1D,SAAUM,IAAQqD,GAAmB5D,IAAQ6D,EAC7CpD,EAAGY,IACHX,EAAG,KACHC,EAAGU,IACHtC,OAAQ,KACRuC,WAAW,EACXnB,QAAQ,EACRR,aAAc,KACdkB,OAAQ,EACR/B,GAAG,GAAD,OAAKyB,EAAL,YAAYP,KAKZ0E,EAAa,SAACnG,EAAMgC,EAAKP,GAC7B,IAAMyE,EAAUlG,EAAK4H,QACfzH,EAAO+F,EAAQlE,GAAKP,GAC1B,GAAGO,IAAQmD,GAAkB1D,IAAQ2D,GAChCpD,IAAQqD,GAAmB5D,IAAQ6D,EACtC,OAAOtF,EAET,IAAM2F,EAAO,2BACRxF,GADQ,IAEZyB,QAASzB,EAAKyB,SAGf,OADAsE,EAAQlE,GAAKP,GAAOkE,EACbO,GAGHG,EAAc,SAACzG,EAAOoC,EAAKP,GAC/B,GAAGO,IAAQmD,GAAkB1D,IAAQ2D,GAChCpD,IAAQqD,GAAmB5D,IAAQ6D,EACtC,OAAO1F,EAET,IAAMwG,EAAWxG,EACXO,EAAOP,EAAM,GAAD,OAAIoC,EAAJ,YAAWP,IACvBkE,EAAO,2BACRxF,GADQ,IAEXyB,QAASzB,EAAKyB,SAIhB,OAFG+D,EAAQ/D,SAAQ+D,EAAQnF,OAAS,QACpC4F,EAAS,GAAD,OAAIpE,EAAJ,YAAWP,IAASkE,EACrBS,GC5QYyB,G,wDAEjB,WAAYrG,GAAO,IAAD,8BACd,cAAMA,IACDoE,MAAQ,CAACkC,MAAOtG,EAAMsG,OAFb,E,yDAKLC,GACTxG,KAAK0E,SAAS,CAAC6B,MAAOC,EAAMjI,OAAOgI,U,uCAKnCtB,SAASC,eAAe,cAAcuB,UAAUC,OAAO,U,iCAGhD1H,GACPgB,KAAK2G,iBACL1B,SAASC,eAAe,eAAeK,UAAYvG,I,+BAI9C,IAAD,OACJ,OACI,qBAAK+G,MAAM,SAAX,SACI,sBAAKA,MAAM,WAAX,UACI,wBAAQC,QAAS,kBAAM,EAAKW,kBAAkBZ,MAAM,UAApD,iCACA,sBAAK/G,GAAG,aAAa+G,MAAM,mBAA3B,UACI,mBAAGa,KAAK,IAAI5H,GAAG,gBAAgBgH,QAAS,kBAAM,EAAKa,WAAW,yBAA9D,kCACA,mBAAGD,KAAK,IAAI5H,GAAG,aAAagH,QAAS,kBAAM,EAAKa,WAAW,cAA3D,uBACA,mBAAGD,KAAK,IAAI5H,GAAG,WAAWgH,QAAS,kBAAM,EAAKa,WAAW,yBAAzD,iBACA,mBAAGD,KAAK,IAAI5H,GAAG,WAAWgH,QAAS,kBAAM,EAAKa,WAAW,uBAAzD,6B,GA/BY5F,cAwCpC6F,OAAOC,QAAU,SAASP,GACtB,IAAKA,EAAMjI,OAAOyI,QAAQ,YAAa,CACvC,IACI5E,EADA6E,EAAYhC,SAASiC,uBAAuB,oBAEhD,IAAK9E,EAAI,EAAGA,EAAI6E,EAAUnH,OAAQsC,IAAK,CACnC,IAAI+E,EAAeF,EAAU7E,GACzB+E,EAAaV,UAAUW,SAAS,SACpCD,EAAaV,UAAUY,OAAO,WCpCvBC,MATf,WACE,OACE,sBAAKtG,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCJNuG,IAASC,OAAO,cAAC,EAAD,IAASvC,SAASC,eAAe,W","file":"static/js/main.1627466f.chunk.js","sourcesContent":["function unweightedSearch(nodes, start, target, visited, grid, algoName){\n    if(!start || !target || start === target)\n        return false;\n    let structure = [nodes[start]];\n    let explored = {start: true};\n    while(structure.length){\n        let node = algoName === \"bfs\" ? structure.shift() : structure.pop();\n        visited.push(node);\n        if(algoName === \"dfs\") visited[node.id] = true;\n        node.status = \"visited\";\n        if(node.id === target){\n            return visited;\n        }\n        let neighbors = getNeighbors(node.id, nodes, grid, algoName);\n        neighbors.forEach(neighbor => {\n           if(!visited[neighbor]){\n               if(algoName === \"bfs\") visited[neighbor] = true;\n               nodes[neighbor].previousNode = node.id;\n               structure.push(nodes[neighbor]);\n           } \n        });\n    }\n    return false;\n}\n\nfunction getNeighbors(id, nodes, grid, algoName){\n    let coords = id.split(\"-\");\n    let x = parseInt(coords[0]);\n    let y = parseInt(coords[1]);\n    let neighbors = [];\n    let neighbor;\n    if(grid[x-1] && grid[x-1][y]){\n        neighbor = `${(x - 1).toString()}-${y.toString()}`;\n        if(nodes[neighbor].status !== \"wall\"){\n            if(algoName === \"bfs\"){\n                neighbors.push(neighbor);\n            }else{\n                neighbors.unshift(neighbor);\n            }\n        }\n    }\n}\n\nmodule.exports = unweightedSearch;","import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      g,\n      h,\n      f,\n      direction,\n      weight,\n      status\n    } = this.props;\n    const type = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${type}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}","// Dijkstra's Algorithm:\n//  - Inputs:\n//      - 2D Grid Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - List of nodes representing the shortest possible path, if one exists.\n\nexport function dijkstra(grid, start, goal) {\n    const visited = [];\n    start.g = 0;\n    const frontier = getNodes(grid);\n    while (!!frontier.length) {\n      sortNodes(frontier);\n      // Guarenteed to be next closest node since we've just sorted the unvisited nodes by distance\n      const node = frontier.shift();\n      \n      // Skip checks for any walls\n      if (node.isWall) continue;\n      // If the closest node is infinite distance, then no path exists to our goal\n      if (node.g === Infinity) return visited;\n\n      node.isVisited = true;\n      visited.push(node);\n      if (node === goal) return visited;\n      updateNeighborCosts(node, grid);\n    }\n  }\n  \n  // Sort the nodes by distance\n  function sortNodes(frontier) {\n    frontier.sort((nodeA, nodeB) => nodeA.g - nodeB.g);\n  }\n  \n  function updateNeighborCosts(node, grid) {\n    const unvisitedNeighbors = getNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.g = node.g + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the goal to find the shortest path.\n\n  export function getPath(goal) {\n    const path = [];\n    let tmpNode = goal;\n    while (tmpNode !== null) {\n      path.unshift(tmpNode);\n      tmpNode = tmpNode.previousNode;\n    }\n    return path;\n  }","// A* Search Algorithm\n//  - Allowable Moves: [N, E, S, W]\n//  - Inputs\n//      - Adjacency Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - Guarenteed shortest possible path\nexport function astar(nodes, start, goal, explored, grid, heuristic){\n    if(!start || !goal || start === goal)\n        return false;\n    nodes[start.id].g = 0;\n    nodes[start.id].f = 0;\n    nodes[start.id].direction = \"N\";\n    let frontier = Object.keys(nodes);\n    console.log(\"frontier:\", frontier)\n    while(frontier.length){\n        // Pop the next closest node off the frontier\n        let node = closestNode(nodes, frontier);\n        // Make sure the node is not a wall\n        while(node.status === \"wall\"  && frontier.length){\n            node = closestNode(nodes, frontier);\n        }\n        if(node.g === Infinity) return false;\n        explored.push(node);\n        node.status = \"visited\"\n        if(node.id === goal.id) return explored;\n\n        updateNeighbors(nodes, node, grid, start, goal, heuristic);\n\n    }\n    \n}\n\nfunction closestNode(nodes, frontier){\n    let node, index;\n    for(let i = 0; i < frontier.length; i++){\n        if(!node || node.f > nodes[frontier[i]].f){\n            node = nodes[frontier[i]];\n            index = i;\n        }\n        else if(node.f === nodes[frontier[i]].f){\n            if(node.h > nodes[frontier[i]].h){\n                node = nodes[frontier[i]];\n                index = i;\n            }\n        }\n    }\n    frontier.splice(index, 1);\n    return node;\n}\n\nfunction updateNeighbors(nodes, node, grid, start, target, heuristic){\n    let neighbors = getNeighbors(node.id, nodes, grid);\n    for(let neighbor of neighbors){\n        if(target){\n            // console.log(\"node:\", node);\n            // console.log(\"neighbor:\", neighbor)\n            updateNode(node, nodes[neighbor], nodes[start.id], nodes[target.id], nodes, grid, heuristic);\n        }\n        else{\n            updateNode(node, nodes[neighbor]);\n        }\n    }\n}\n\nfunction updateNode(node, tmpTarget, trueStart, trueTarget, nodes, grid, heuristic){\n    let path = getPathCost(node, tmpTarget);\n    // If our new target node has no heuristic => Assign to be manhattan distance\n    if(!tmpTarget.h) tmpTarget.h = manhattanDistance(tmpTarget, trueTarget);\n    let dist = node.g + tmpTarget.weight + path[0];\n    if(dist < tmpTarget.g){\n        tmpTarget.g = dist;\n        tmpTarget.f = tmpTarget.g + tmpTarget.h\n        tmpTarget.previousNode = node;\n        tmpTarget.path = path[1];\n        tmpTarget.direction = path[2];\n    }\n}\n\nfunction getNeighbors(id, nodes, grid){\n    let coords = id.split(\"-\");\n    let x = parseInt(coords[0]);\n    let y = parseInt(coords[1]);\n    let neighbors = [];\n    let neighbor;\n    // North\n    if(grid[x-1] && grid[x-1][y]){\n        neighbor = `${(x-1).toString()}-${y.toString()}`;\n        if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n    }\n    // South\n    if(grid[x+1] && grid[x+1][y]){\n        neighbor = `${(x+1).toString()}-${y.toString()}`;\n        if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n    }\n    if(grid[x][y-1]){\n        neighbor = `${x.toString()}-${(y - 1).toString()}`;\n        if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n    }\n    if(grid[x][y+1]){\n        neighbor = `${x.toString()}-${(y + 1).toString()}`;\n        if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n    }\n    return neighbors;\n}\n\nfunction getPathCost(nodeA, nodeB){\n    let startCoords = nodeA.id.split(\"-\");\n    let targetCoords = nodeB.id.split(\"-\");\n    let nodeAx = parseInt(startCoords[0]);\n    let nodeAy = parseInt(startCoords[1]);\n    let nodeBx = parseInt(targetCoords[0]);\n    let nodeBy = parseInt(targetCoords[1]);\n    // B is above A\n    if(nodeBx < nodeAx && nodeAy === nodeBy){\n        if(nodeA.direction === \"N\") return [1, [\"f\"], \"N\"];\n        else if(nodeA.direction === \"E\") return [2, [\"l\", \"f\"], \"N\"];\n        else if(nodeA.direction === \"W\") return [2, [\"r\", \"f\"], \"N\"];\n        else if(nodeA.direction === \"S\") return [3, [\"r\", \"r\", \"f\"], \"N\"];\n        else if(nodeA.direction === \"NE\") return [1.5, null, \"N\"];\n        else if(nodeA.direction === \"SE\") return [2.5, null, \"N\"];\n        else if(nodeA.direction === \"NW\") return [1.5, null, \"N\"];\n        else if(nodeA.direction === \"SW\") return [2.5, null, \"N\"];\n    }\n    else if(nodeBx > nodeAx && nodeAy === nodeBy){\n        if(nodeA.direction === \"N\") return [3, [\"r\", \"r\", \"f\"], \"S\"];\n        else if(nodeA.direction === \"E\") return [2, [\"r\", \"f\"], \"S\"];\n        else if(nodeA.direction === \"W\") return [2, [\"l\", \"f\"], \"S\"];\n        else if(nodeA.direction === \"S\") return [1, [\"f\"], \"S\"];\n        else if(nodeA.direction === \"NE\") return [2.5, null, \"S\"];\n        else if(nodeA.direction === \"SE\") return [1.5, null, \"S\"];\n        else if(nodeA.direction === \"NW\") return [2.5, null, \"S\"];\n        else if(nodeA.direction === \"SW\") return [1.5, null, \"S\"];\n    }\n    if(nodeBy < nodeAy && nodeAx === nodeBx){\n        if(nodeA.direction === \"N\") return [2, [\"l\", \"f\"], \"W\"];\n        else if(nodeA.direction === \"E\") return [3, [\"l\", \"l\", \"f\"], \"W\"];\n        else if(nodeA.direction === \"W\") return [1, [\"f\"], \"W\"];\n        else if(nodeA.direction === \"S\") return [2, [\"r\", \"f\"], \"W\"];\n        else if(nodeA.direction === \"NE\") return [2.5, null, \"W\"];\n        else if(nodeA.direction === \"SE\") return [2.5, null, \"W\"];\n        else if(nodeA.direction === \"NW\") return [1.5, null, \"W\"];\n        else if(nodeA.direction === \"SW\") return [1.5, null, \"W\"];\n    }\n    else if(nodeBy > nodeAy && nodeAx === nodeBx){\n        if(nodeA.direction === \"N\") return [2, [\"r\", \"f\"], \"E\"];\n        else if(nodeA.direction === \"E\") return [1, [\"f\"], \"E\"];\n        else if(nodeA.direction === \"W\") return [3, [\"r\",\"r\",\"f\"], \"E\"];\n        else if(nodeA.direction === \"S\") return [2, [\"l\", \"f\"], \"E\"];\n        else if(nodeA.direction === \"NE\") return [1.5, null, \"E\"];\n        else if(nodeA.direction === \"SE\") return [1.5, null, \"E\"];\n        else if(nodeA.direction === \"NW\") return [2.5, null, \"E\"];\n        else if(nodeA.direction === \"SW\") return [2.5, null, \"E\"];\n    }\n}\n\nfunction manhattanDistance(nodeA, nodeB){\n    let nodeAcoords = nodeA.id.split(\"-\").map(x => parseInt(x));\n    let nodeBcoords = nodeB.id.split(\"-\").map(x => parseInt(x));\n    let nodeAx = nodeAcoords[0];\n    let nodeBx = nodeBcoords[0];\n    let nodeAy = nodeAcoords[1];\n    let nodeBy = nodeBcoords[1];\n\n    let delta_x = Math.abs(nodeAx - nodeBx);\n    let delta_y = Math.abs(nodeAy - nodeBy);\n\n    return (delta_x + delta_y);\n}\n\nexport function getAstarPath(goal) {\n    const path = [];\n    let tmpNode = goal;\n    while (tmpNode !== null) {\n      path.unshift(tmpNode);\n      tmpNode = tmpNode.previousNode;\n    }\n    return path;\n  }","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getPath} from '../algorithms/dijkstra';\nimport {astar, getAstarPath} from '../algorithms/astar';\nimport './pathfindingVisualizer.css';\nimport {unweightedSearch, getNeighbors} from '../algorithms/unweightedSearch';\nimport { nodeName } from 'jquery';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      nodes: {},\n      mouseDown: false,\n      algoFinished: true,\n      currentAlgo: null,\n      start: null,\n      target: null\n    };\n  }\n\n  componentDidMount() {\n    const board = this.initGrid();\n    this.setState({grid: board[0], nodes: board[1]});\n  }\n\n  onMouseDown(row, col) {\n    const newGrid = updateGrid(this.state.grid, row, col);\n    const newNodes = updateNodes(this.state.nodes, row, col);\n    this.setState({grid: newGrid, nodes: newNodes, mouseDown: true});\n  }\n\n  onMouseEnter(row, col) {\n    if (!this.state.mouseDown) return;\n    const newGrid = updateGrid(this.state.grid, row, col);\n    const newNodes = updateNodes(this.state.nodes, row, col);\n    this.setState({grid: newGrid, nodes: newNodes});\n  }\n\n  onMouseUp() {\n    this.setState({mouseDown: false});\n  }\n\n  animateSearch(visited, path) {\n    if(visited === false){\n      console.log(\"No path found.\")\n      this.algoFinished = true;\n      document.getElementById(\"startButton\").disabled = false;\n      document.getElementById(\"clearGridButton\").disabled = false;\n    }\n    for (let i = 0; i <= visited.length; i++) {\n      if (i === visited.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      // Visited nodes get animated in 10ms intervals\n      setTimeout(() => {\n        const node = visited[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 35 * i);\n    }\n    this.algoFinished = true;\n    document.getElementById(\"startButton\").disabled = false;\n    document.getElementById(\"clearGridButton\").disabled = false;\n  }\n\n  visualizeSearch() {\n      const algo = document.getElementById(\"startButton\").innerHTML;\n      if(algo === \"Visualize Algorithm\"){\n        console.log(\"Select an algorithm!\");\n      }\n      else{\n        document.getElementById(\"startButton\").disabled = true;\n        document.getElementById(\"clearGridButton\").disabled = true;\n      }\n      this.algoFinished = false;\n      const {grid, nodes} = this.state;\n      const start = grid[START_NODE_ROW][START_NODE_COL];\n      const goal = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      var visited = [];\n      var path = [];\n      // Select algo based on start button text\n      if(algo === \"A* Search\"){\n        console.log(nodes)\n        // console.log(\"start:\", start)\n        // console.log(\"start-id:\", start.id)\n        // console.log(\"goal:\", goal)\n        visited = astar(nodes, start, goal, visited, grid, []);\n        path = getAstarPath(goal);\n        console.log(\"Visited:\", visited);\n        console.log(\"Path:\", path);\n        this.animateSearch(visited, path);\n      }\n      else if(algo === \"Dijkstra's Algorithm\"){\n        visited = dijkstra(grid, start, goal);\n        path = getPath(goal);\n        this.animateSearch(visited, path);\n      }else if(algo === \"Depth-First-Search\"){\n        visited = unweightedSearch(nodes, start, goal, visited, grid, \"dfs\");\n        path = getPath(goal);\n        this.animateSearch(visited, path);\n      }else if(algo === \"Breadth-First-Search\"){\n        visited = unweightedSearch(nodes, start, goal, visited, grid, \"bfs\");\n        path = getPath(goal);\n        this.animateSearch(visited, path);\n      }\n  }\n\n  clearGrid() {\n    if(this.algoFinished){\n      const board = this.initGrid();\n      this.setState({grid: board[0], nodes: board[1]});\n      for(let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n          if(row === START_NODE_ROW && col === START_NODE_COL){\n            //this.nodes[this.start].status = \"start\"\n            document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          }\n          else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n            //this.target.status = \"target\";\n          }\n          else{\n            //this.nodes[`${row}-${col}`].status = \"unvisited\";\n            document.getElementById(`node-${row}-${col}`).className = 'node';\n          }\n        }\n      }\n    }\n  }\n  // Initialize New Grid\n  initGrid = () => {\n    var grid = [];\n    var nodes = {};\n    for (let row = 0; row < 20; row++) {\n      const tmpRow = [];\n      for (let col = 0; col < 50; col++) {\n        var nodeId = `${row}-${col}`, nodeClass, node;\n        var node = newNode(col, row);\n\n        if(row === START_NODE_ROW && col === START_NODE_COL){\n          node.status = \"start\"\n        } \n        else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n          node.status = \"target\"\n        } \n        else node.status = \"node\"\n\n        tmpRow.push(node);\n        nodes[nodeId] = node;\n      }\n      grid.push(tmpRow);\n    }\n    return [grid, nodes];\n  };\n\n  render() {\n    const {grid, mouseDown, algoFinished} = this.state;\n    let tableHTML = \"\";\n    return (\n      <>\n        \n        <div class=\"board\">\n        <div class=\"center\">\n          <button id=\"startButton\" onClick={() => this.visualizeSearch()}>Visualize Algorithm</button>\n        </div>\n        <div class=\"center\">\n          <button id=\"clearGridButton\" onClick={() => this.clearGrid()}>Clear Grid</button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      g = {Infinity}\n                      h = {null}\n                      f = {Infinity}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseDown={mouseDown}\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n                      onMouseUp={() => this.onMouseUp()}\n                      row={row}></Node>\n                      \n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        </div>\n      </>\n    );\n  }\n}\n\n// Create a new Node\nconst newNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    g: Infinity,\n    h: null,\n    f: Infinity,\n    status: null,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    weight: 0,\n    id: `${row}-${col}`\n  };\n};\n\n// Update our grid state\nconst updateGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return grid;\n  }\n  const newNode = {\n    ...node,\n   isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst updateNodes = (nodes, row, col) => {\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return nodes;\n  }\n  const newNodes = nodes;\n  const node = nodes[`${row}-${col}`];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  if(newNode.isWall) newNode.status = \"wall\";\n  newNodes[`${row}-${col}`] = newNode;\n  return newNodes;\n}","import React, {Component} from 'react';\nimport './navbar.css';\n\nexport default class Navbar extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {value: props.value};\n    }\n\n    handleChange(event){\n        this.setState({value: event.target.value});\n    }\n    \n    toggleDropdown(){\n        \n        document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n\n    selectAlgo(id){\n        this.toggleDropdown();\n        document.getElementById(\"startButton\").innerHTML = id;\n        return;\n    }\n\n    render(){\n        return(\n            <div class=\"navbar\">\n                <div class=\"dropdown\">\n                    <button onClick={() => this.toggleDropdown()} class=\"dropbtn\">Select an Algorithm</button>\n                    <div id=\"myDropdown\" class=\"dropdown-content\">\n                        <a href=\"#\" id=\"dijkstraStart\" onClick={() => this.selectAlgo(\"Dijkstra's Algorithm\")}>Dijkstra's Algorithm</a>\n                        <a href=\"#\" id=\"astarStart\" onClick={() => this.selectAlgo(\"A* Search\")}>A* Search</a>\n                        <a href=\"#\" id=\"bfsStart\" onClick={() => this.selectAlgo(\"Breadth-First-Search\")}>BFS</a>\n                        <a href=\"#\" id=\"dfsStart\" onClick={() => this.selectAlgo(\"Depth-First-Search\")}>DFS</a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}    \n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function(event) {\n    if (!event.target.matches('.dropbtn')) {\n    var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n    var i;\n    for (i = 0; i < dropdowns.length; i++) {\n        var openDropdown = dropdowns[i];\n        if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n        }\n    }\n    }\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './pathfindingVisualizer/pathfindingVisualizer';\nimport Navbar from './navbar';\n\nfunction App() {\n  return (    \n    <div className=\"App\">\n      <Navbar></Navbar>\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}