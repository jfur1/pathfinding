[{"/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/index.js":"1","/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/App.js":"2","/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/pathfindingVisualizer/pathfindingVisualizer.jsx":"3","/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/pathfindingVisualizer/Node/Node.jsx":"4","/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/algorithms/dijkstra.js":"5","/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/navbar.jsx":"6"},{"size":218,"mtime":1609380808066,"results":"7","hashOfConfig":"8"},{"size":310,"mtime":1609541816835,"results":"9","hashOfConfig":"8"},{"size":5069,"mtime":1609552302095,"results":"10","hashOfConfig":"8"},{"size":661,"mtime":1609542939395,"results":"11","hashOfConfig":"8"},{"size":2118,"mtime":1609099972057,"results":"12","hashOfConfig":"8"},{"size":1823,"mtime":1609552157548,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"10k8n50",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/index.js",[],["30","31"],"/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/App.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/pathfindingVisualizer/pathfindingVisualizer.jsx",["32"],"import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getPath} from '../algorithms/dijkstra';\n\nimport './pathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseDown: false,\n      algoFinished: true,\n      currentAlgo: null,\n    };\n  }\n\n  componentDidMount() {\n    const grid = initGrid();\n    this.setState({grid});\n  }\n\n  onMouseDown(row, col) {\n    const newGrid = updateGrid(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseDown: true});\n  }\n\n  onMouseEnter(row, col) {\n    if (!this.state.mouseDown) return;\n    const newGrid = updateGrid(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  onMouseUp() {\n    this.setState({mouseDown: false});\n  }\n\n  animateSearch(visited, path) {\n    for (let i = 0; i <= visited.length; i++) {\n      if (i === visited.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      // Visited nodes get animated in 10ms intervals\n      setTimeout(() => {\n        const node = visited[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 35 * i);\n    }\n    this.algoFinished = true;\n    document.getElementById(\"startButton\").disabled = false;\n    document.getElementById(\"clearGridButton\").disabled = false;\n  }\n\n  visualizeSearch() {\n      document.getElementById(\"startButton\").disabled = true;\n      document.getElementById(\"clearGridButton\").disabled = true;\n      this.algoFinished = false;\n      const {grid} = this.state;\n      const start = grid[START_NODE_ROW][START_NODE_COL];\n      const goal = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      const visited = dijkstra(grid, start, goal);\n      const path = getPath(goal);\n      this.animateSearch(visited, path);\n  }\n\n  clearGrid() {\n    if(this.algoFinished){\n      const grid = initGrid();\n      this.setState({grid});\n      for(let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n          if(row === START_NODE_ROW && col === START_NODE_COL){\n            document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          }\n          else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n          }\n          else{\n            document.getElementById(`node-${row}-${col}`).className = 'node';\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    const {grid, mouseDown, algoFinished} = this.state;\n    \n    return (\n      <>\n        <div class=\"center\">\n          <button id=\"startButton\" onClick={() => this.visualizeSearch()}>Visualize Algorithm</button>\n        </div>\n        <div class=\"center\">\n          <button id=\"clearGridButton\" onClick={() => this.clearGrid()}>Clear Grid</button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseDown={mouseDown}\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n                      onMouseUp={() => this.onMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n// Initialize New Grid\nconst initGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const tmpRow = [];\n    for (let col = 0; col < 50; col++) {\n      tmpRow.push(newNode(col, row));\n    }\n    grid.push(tmpRow);\n  }\n  return grid;\n};\n// Create a new Node\nconst newNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\n// Update our grid state\nconst updateGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\n","/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/pathfindingVisualizer/Node/Node.jsx",[],["33","34"],"/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/algorithms/dijkstra.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfindingVisualizer/my-app/src/navbar.jsx",["35","36","37","38"],"import React, {Component} from 'react';\nimport './navbar.css';\n\nexport default class Navbar extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {value: props.value};\n    }\n\n    handleChange(event){\n        this.setState({value: event.target.value});\n    }\n    \n    toggleDropdown(){\n        \n        document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n\n    selectAlgo(id){\n        this.toggleDropdown();\n        document.getElementById(\"startButton\").innerHTML = id;\n        return;\n    }\n\n    render(){\n        return(\n            <div class=\"navbar\">\n                <div class=\"dropdown\">\n                    <button onClick={() => this.toggleDropdown()} class=\"dropbtn\">Select an Algorithm</button>\n                    <div id=\"myDropdown\" class=\"dropdown-content\">\n                        <a href=\"#\" id=\"dijkstraStart\" onClick={() => this.selectAlgo(\"Dijkstra's Algorithm\")}>Dijkstra's Algorithm</a>\n                        <a href=\"#\" id=\"astarStart\" onClick={() => this.selectAlgo(\"A* Search\")}>A* Search</a>\n                        <a href=\"#\" id=\"bfsStart\" onClick={() => this.selectAlgo(\"Breadth-First-Search\")}>BFS</a>\n                        <a href=\"#\" id=\"dfsStart\" onClick={() => this.selectAlgo(\"Depth-First-Search\")}>DFS</a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}    \n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function(event) {\n    if (!event.target.matches('.dropbtn')) {\n    var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n    var i;\n    for (i = 0; i < dropdowns.length; i++) {\n        var openDropdown = dropdowns[i];\n        if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n        }\n    }\n    }\n}",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":107,"column":29,"nodeType":"45","messageId":"46","endLine":107,"endColumn":41},{"ruleId":"39","replacedBy":"47"},{"ruleId":"41","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":32,"column":25,"nodeType":"51","endLine":32,"endColumn":112},{"ruleId":"49","severity":1,"message":"50","line":33,"column":25,"nodeType":"51","endLine":33,"endColumn":98},{"ruleId":"49","severity":1,"message":"50","line":34,"column":25,"nodeType":"51","endLine":34,"endColumn":107},{"ruleId":"49","severity":1,"message":"50","line":35,"column":25,"nodeType":"51","endLine":35,"endColumn":105},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'algoFinished' is assigned a value but never used.","Identifier","unusedVar",["52"],["53"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]