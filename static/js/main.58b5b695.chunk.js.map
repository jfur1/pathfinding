{"version":3,"sources":["pathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","pathfindingVisualizer/pathfindingVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","navbar.jsx","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","type","g","h","f","direction","weight","status","id","className","Component","dijkstra","grid","start","goal","visited","frontier","nodes","node","push","getNodes","length","sortNodes","shift","Infinity","isVisited","updateNeighborCosts","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getNeighbors","previousNode","closestNode","index","i","splice","updateNeighbors","target","heuristic","coords","split","x","parseInt","y","toString","updateNode","tmpTarget","trueStart","trueTarget","path","startCoords","targetCoords","nodeAx","nodeAy","nodeBx","nodeBy","getPathCost","nodeAcoords","map","nodeBcoords","delta_x","Math","abs","delta_y","manhattanDistance","dist","PathfindingVisualizer","initGrid","n_rows","state","N_ROWS","n_cols","N_COLS","initialGrid","newNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","distance","isNode","mousePressed","N_ROWS_MOBILE","N_COLS_MOBILE","isRunning","isDesktop","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","newGrid","updateGrid","nodeClassName","nodeClass","isFinishN","startNode","isFinishNode","finishNode","wallNode","slice","algo","visitedNodesInOrder","finish","explored","Object","keys","console","log","astar","stack","nextNode","bfs","pop","dfs","unshift","getPath","animate","setTimeout","animatePath","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onMouseLeave","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","onClick","visualize","isDesktopView","toggleView","window","onclick","event","matches","dropdowns","getElementsByClassName","openDropdown","classList","contains","remove","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.58b5b695.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      g,\n      h,\n      f,\n      direction,\n      weight,\n      status\n    } = this.props;\n    const type = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${type}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}","// Dijkstra's Algorithm:\n//  - Inputs:\n//      - 2D Grid Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - List of nodes representing the shortest possible path, if one exists.\n\nexport function dijkstra(grid, start, goal) {\n    const visited = [];\n    start.g = 0;\n    const frontier = getNodes(grid);\n    while (!!frontier.length) {\n      sortNodes(frontier);\n      // Guarenteed to be next closest node since we've just sorted the unvisited nodes by distance\n      const node = frontier.shift();\n      \n      // Skip checks for any walls\n      if (node.isWall) continue;\n      // If the closest node is infinite distance, then no path exists to our goal\n      if (node.g === Infinity) return visited;\n\n      node.isVisited = true;\n      visited.push(node);\n      if (node === goal) return visited;\n      updateNeighborCosts(node, grid);\n    }\n  }\n  \n  // Sort the nodes by distance\n  function sortNodes(frontier) {\n    frontier.sort((nodeA, nodeB) => nodeA.g - nodeB.g);\n  }\n  \n  function updateNeighborCosts(node, grid) {\n    const unvisitedNeighbors = getNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.g = node.g + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the goal to find the shortest path.\n\n  export function getPath(goal) {\n    const path = [];\n    let tmpNode = goal;\n    while (tmpNode !== null) {\n      path.unshift(tmpNode);\n      tmpNode = tmpNode.previousNode;\n    }\n    return path;\n  }","// A* Search Algorithm\n//  - Allowable Moves: [N, E, S, W]\n//  - Inputs\n//      - Adjacency Matrix\n//      - Start Node\n//      - Goal Node\n//  - Output:\n//      - Guarenteed shortest possible path\nexport function astar(nodes, start, goal, explored, grid, heuristic){\n    if(!start || !goal || start === goal)\n        return false;\n    nodes[start.id].g = 0;\n    nodes[start.id].f = 0;\n    nodes[start.id].direction = \"N\";\n    let frontier = Object.keys(nodes);\n    console.log(\"frontier:\", frontier)\n    while(frontier.length){\n        // Pop the next closest node off the frontier\n        let node = closestNode(nodes, frontier);\n        // Make sure the node is not a wall\n        while(node.status === \"wall\"  && frontier.length){\n            node = closestNode(nodes, frontier);\n        }\n        if(node.g === Infinity) return false;\n        explored.push(node);\n        node.status = \"visited\";\n        if(node.id === goal.id) return explored;\n\n        updateNeighbors(nodes, node, grid, start, goal, heuristic);\n\n    }\n    \n}\n\nfunction closestNode(nodes, frontier){\n    let node, index;\n    for(let i = 0; i < frontier.length; i++){\n        if(!node || node.f > nodes[frontier[i]].f){\n            node = nodes[frontier[i]];\n            index = i;\n        }\n        else if(node.f === nodes[frontier[i]].f){\n            if(node.h > nodes[frontier[i]].h){\n                node = nodes[frontier[i]];\n                index = i;\n            }\n        }\n    }\n    frontier.splice(index, 1);\n    return node;\n}\n\nfunction updateNeighbors(nodes, node, grid, start, target, heuristic){\n    let neighbors = getNeighbors(node.id, nodes, grid);\n    for(let neighbor of neighbors){\n        if(target){\n            // console.log(\"node:\", node);\n            // console.log(\"neighbor:\", neighbor)\n            updateNode(node, nodes[neighbor], nodes[start.id], nodes[target.id], nodes, grid, heuristic);\n        }\n        else{\n            updateNode(node, nodes[neighbor]);\n        }\n    }\n}\n\nfunction updateNode(node, tmpTarget, trueStart, trueTarget, nodes, grid, heuristic){\n    let path = getPathCost(node, tmpTarget);\n    // If our new target node has no heuristic => Assign to be manhattan distance\n    if(!tmpTarget.h) tmpTarget.h = manhattanDistance(tmpTarget, trueTarget);\n    let dist = node.g + tmpTarget.weight + path[0];\n    if(dist < tmpTarget.g){\n        tmpTarget.g = dist;\n        tmpTarget.f = tmpTarget.g + tmpTarget.h\n        tmpTarget.previousNode = node;\n        tmpTarget.path = path[1];\n        tmpTarget.direction = path[2];\n    }\n}\n\nfunction getNeighbors(id, nodes, grid){\n    let coords = id.split(\"-\");\n    let x = parseInt(coords[0]);\n    let y = parseInt(coords[1]);\n    let neighbors = [];\n    let neighbor;\n    // North\n    if(grid[x-1] && grid[x-1][y]){\n        neighbor = `${(x-1).toString()}-${y.toString()}`;\n        if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n    }\n    // South\n    if(grid[x+1] && grid[x+1][y]){\n        neighbor = `${(x+1).toString()}-${y.toString()}`;\n        if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n    }\n    if(grid[x][y-1]){\n        neighbor = `${x.toString()}-${(y - 1).toString()}`;\n        if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n    }\n    if(grid[x][y+1]){\n        neighbor = `${x.toString()}-${(y + 1).toString()}`;\n        if(nodes[neighbor].status !== \"wall\") neighbors.push(neighbor);\n    }\n    return neighbors;\n}\n\nfunction getPathCost(nodeA, nodeB){\n    let startCoords = nodeA.id.split(\"-\");\n    let targetCoords = nodeB.id.split(\"-\");\n    let nodeAx = parseInt(startCoords[0]);\n    let nodeAy = parseInt(startCoords[1]);\n    let nodeBx = parseInt(targetCoords[0]);\n    let nodeBy = parseInt(targetCoords[1]);\n    // B is above A\n    if(nodeBx < nodeAx && nodeAy === nodeBy){\n        if(nodeA.direction === \"N\") return [1, [\"f\"], \"N\"];\n        else if(nodeA.direction === \"E\") return [2, [\"l\", \"f\"], \"N\"];\n        else if(nodeA.direction === \"W\") return [2, [\"r\", \"f\"], \"N\"];\n        else if(nodeA.direction === \"S\") return [3, [\"r\", \"r\", \"f\"], \"N\"];\n        else if(nodeA.direction === \"NE\") return [1.5, null, \"N\"];\n        else if(nodeA.direction === \"SE\") return [2.5, null, \"N\"];\n        else if(nodeA.direction === \"NW\") return [1.5, null, \"N\"];\n        else if(nodeA.direction === \"SW\") return [2.5, null, \"N\"];\n    }\n    else if(nodeBx > nodeAx && nodeAy === nodeBy){\n        if(nodeA.direction === \"N\") return [3, [\"r\", \"r\", \"f\"], \"S\"];\n        else if(nodeA.direction === \"E\") return [2, [\"r\", \"f\"], \"S\"];\n        else if(nodeA.direction === \"W\") return [2, [\"l\", \"f\"], \"S\"];\n        else if(nodeA.direction === \"S\") return [1, [\"f\"], \"S\"];\n        else if(nodeA.direction === \"NE\") return [2.5, null, \"S\"];\n        else if(nodeA.direction === \"SE\") return [1.5, null, \"S\"];\n        else if(nodeA.direction === \"NW\") return [2.5, null, \"S\"];\n        else if(nodeA.direction === \"SW\") return [1.5, null, \"S\"];\n    }\n    if(nodeBy < nodeAy && nodeAx === nodeBx){\n        if(nodeA.direction === \"N\") return [2, [\"l\", \"f\"], \"W\"];\n        else if(nodeA.direction === \"E\") return [3, [\"l\", \"l\", \"f\"], \"W\"];\n        else if(nodeA.direction === \"W\") return [1, [\"f\"], \"W\"];\n        else if(nodeA.direction === \"S\") return [2, [\"r\", \"f\"], \"W\"];\n        else if(nodeA.direction === \"NE\") return [2.5, null, \"W\"];\n        else if(nodeA.direction === \"SE\") return [2.5, null, \"W\"];\n        else if(nodeA.direction === \"NW\") return [1.5, null, \"W\"];\n        else if(nodeA.direction === \"SW\") return [1.5, null, \"W\"];\n    }\n    else if(nodeBy > nodeAy && nodeAx === nodeBx){\n        if(nodeA.direction === \"N\") return [2, [\"r\", \"f\"], \"E\"];\n        else if(nodeA.direction === \"E\") return [1, [\"f\"], \"E\"];\n        else if(nodeA.direction === \"W\") return [3, [\"r\",\"r\",\"f\"], \"E\"];\n        else if(nodeA.direction === \"S\") return [2, [\"l\", \"f\"], \"E\"];\n        else if(nodeA.direction === \"NE\") return [1.5, null, \"E\"];\n        else if(nodeA.direction === \"SE\") return [1.5, null, \"E\"];\n        else if(nodeA.direction === \"NW\") return [2.5, null, \"E\"];\n        else if(nodeA.direction === \"SW\") return [2.5, null, \"E\"];\n    }\n}\n\nfunction manhattanDistance(nodeA, nodeB){\n    let nodeAcoords = nodeA.id.split(\"-\").map(x => parseInt(x));\n    let nodeBcoords = nodeB.id.split(\"-\").map(x => parseInt(x));\n    let nodeAx = nodeAcoords[0];\n    let nodeBx = nodeBcoords[0];\n    let nodeAy = nodeAcoords[1];\n    let nodeBy = nodeBcoords[1];\n\n    let delta_x = Math.abs(nodeAx - nodeBx);\n    let delta_y = Math.abs(nodeAy - nodeBy);\n\n    return (delta_x + delta_y);\n}\n\n// export function astar(trueGrid, start, goal){\n//     const grid = {...grid};\n//     const visited = [];\n//     start.distance = 0;\n//     const frontier = getNodes(grid);\n\n//     while(frontier.length){\n//         sortByDistance(frontier);\n//         const node = frontier.shift();\n//         if(!node.isWall){\n//             if(node.distance === Infinity) return false;\n//             node.isVisited = true;\n//             visited.push(node);\n//             if(node == goal) return visited;\n//             updateUnvisitedNeighbors(node, grid);\n//         }\n//     }\n// }\n\nfunction getNodes(grid){\n    const nodes = [];\n    for(const row of grid){\n        for(const node of row){\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// function sortByDistance(unvisitedNodes) {\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n// }\n\n// function updateUnvisitedNeighbors(node, grid) {\n//     const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n//     for (const neighbor of unvisitedNeighbors) {\n//       neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n//       neighbor.previousNode = node;\n//     }\n// }\n\n// function getUnvisitedNeighbors(node, grid) {\n//     const neighbors = [];\n//     const {col, row} = node;\n//     if (row > 0) neighbors.push(grid[row - 1][col]);\n//     if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n//     if (col > 0) neighbors.push(grid[row][col - 1]);\n//     if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n//     return neighbors.filter(neighbor => !neighbor.isVisited);\n// }\n\nexport function getAstarPath(goal) {\n    const path = [];\n    let tmpNode = goal;\n    while (tmpNode !== null) {\n      path.unshift(tmpNode);\n      tmpNode = tmpNode.previousNode;\n    }\n    return path;\n  }\n\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra} from '../algorithms/dijkstra';\nimport {astar} from '../algorithms/astar';\nimport {dfs} from '../algorithms/dfs';\nimport { bfs } from '../algorithms/bfs';\nimport './pathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(){\n    super();\n    this.state = {\n      grid: [],\n      START_NODE_ROW: 7,\n      START_NODE_COL: 10,\n      FINISH_NODE_ROW: 10,\n      FINISH_NODE_COL: 6,\n      mousePressed: false,\n      N_ROWS: 20,\n      N_COLS: 50,\n      N_ROWS_MOBILE: 10,\n      N_COLS_MOBILE: 20,\n      isRunning: false,\n      isStart: false,\n      isFinish: false,\n      isWall: false,\n      row: 0,\n      col: 0,\n      isDesktop: true,\n    };\n    // Event Handler Prototypes\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.initGrid();\n    this.setState({grid});\n  }\n\n  toggleIsRunning() {\n    this.setState({isRunning: !this.state.isRunning});\n  }\n\n  toggleView() {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.clearWalls();\n      const isDesktop = !this.state.isDesktop;\n      let grid;\n      if (isDesktop) {\n        grid = this.initGrid(\n          this.state.N_ROWS,\n          this.state.N_COLS,\n        );\n        this.setState({isDesktop, grid});\n      } else {\n        if (\n          this.state.START_NODE_ROW > this.state.N_ROWS_MOBILE ||\n          this.state.FINISH_NODE_ROW > this.state.N_ROWS_MOBILE ||\n          this.state.START_NODE_COL > this.state.N_COLS_MOBILE ||\n          this.state.FINISH_NODE_COL > this.state.N_COLS_MOBILE\n        ) {\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\n        } else {\n          grid = this.initGrid(\n            this.state.N_ROWS_MOBILE,\n            this.state.N_COLS_MOBILE,\n          );\n          this.setState({isDesktop, grid});\n        }\n      }\n    }\n  }\n\n  /* -------------------- Initialize 2D Grid --------------------- */\n  initGrid = (\n    n_rows = this.state.N_ROWS,\n    n_cols = this.state.N_COLS,\n  ) => {\n    const initialGrid = [];\n    for(let row = 0; row < n_rows; row++){\n      const row = [];\n      for(let col = 0; col < n_cols; col++){\n        row.push(this.newNode(row, col));\n      }\n      initialGrid.push(row);\n    }\n    return initialGrid;\n  };\n\n  newNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n      distance: Infinity,\n      heuristic:  \n        Math.abs(this.state.FINISH_NODE_ROW - row) + \n        Math.abs(this.state.FINISH_NODE_COL - col),\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      isNode: true,\n    }; \n  };\n\n  /* --------------------- Mouse Event Handlers ----------------------- */\n  handleMouseDown(row, col){\n    if(!this.state.isRunning){\n      if(this.isGridClear()){\n        if(document.getElementById(`node-${row}-${col}`).className === 'node node-start'){\n          this.setState({\n            mousePressed: true,\n            isStart: true,\n            row: row,\n            col: col,\n          });\n        } else if(document.getElementById(`node-${row}-${col}`).className === 'node node-finish'){\n          this.setState({\n            mousePressed: true,\n            isFinish: true,\n            row: row,\n            col: col,\n          });\n        } else{\n          const newGrid = updateGrid(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid, \n            mousePressed: true,\n            isWall: true,\n            row: row,\n            col: col,\n          });\n        }\n      } else{\n        this.clearGrid();\n      }\n    }\n  }\n\n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName === 'node node-visited' ||\n          nodeClassName === 'node node-shortest-path'\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.isRunning) {\n      if (this.state.mousePressed) {\n        const nodeClass = document.getElementById(`node-${row}-${col}`)\n          .className;\n        if (this.state.isStart) {\n          if (nodeClass !== 'node node-wall') {\n            const prevStartNode = this.state.grid[this.state.row][\n              this.state.col\n            ];\n            prevStartNode.isStart = false;\n            document.getElementById(\n              `node-${this.state.row}-${this.state.col}`,\n            ).className = 'node';\n\n            this.setState({row: row, col: col});\n            const currStartNode = this.state.grid[row][col];\n            currStartNode.isStart = true;\n            document.getElementById(`node-${row}-${col}`).className =\n              'node node-start';\n          }\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\n        } else if (this.state.isFinishN) {\n          if (nodeClass !== 'node node-wall') {\n            const prevFinish = this.state.grid[this.state.row][\n              this.state.col\n            ];\n            prevFinish.isFinish = false;\n            document.getElementById(\n              `node-${this.state.row}-${this.state.col}`,\n            ).className = 'node';\n\n            this.setState({row: row, col: col});\n            const currentFinish = this.state.grid[row][col];\n            currentFinish.isFinish = true;\n            document.getElementById(`node-${row}-${col}`).className =\n              'node node-finish';\n          }\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\n        } else if (this.state.isWall) {\n          const newGrid = updateGrid(this.state.grid, row, col);\n          this.setState({grid: newGrid});\n        }\n      }\n    }\n  }\n\n  handleMouseUp(row, col) {\n    if (!this.state.isRunning) {\n      this.setState({mousePressed: false});\n      if (this.state.isStart) {\n        const startNode = !this.state.isStart;\n        this.setState({startNode, START_NODE_ROW: row, START_NODE_COL: col});\n      } else if (this.state.isFinishNode) {\n        const finishNode = !this.state.isFinish;\n        this.setState({\n          finishNode,\n          FINISH_NODE_ROW: row,\n          FINISH_NODE_COL: col,\n        });\n      }\n      this.initGrid();\n    }\n  }\n\n  handleMouseLeave() {\n    if (this.state.isStart) {\n      const startNode = !this.state.isStart;\n      this.setState({startNode, mousePressed: false});\n    } else if (this.state.isFinish) {\n      const finishNode = !this.state.isFinish;\n      this.setState({finishNode, mousePressed: false});\n    } else if (this.state.isWall) {\n      const wallNode = !this.state.isWall;\n      this.setState({wallNode, mousePressed: false});\n      this.initGrid();\n    }\n  }\n\n  /* ---------------------- Update Grid / Walls --------------------------- */\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let className = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            className !== 'node node-start' &&\n            className !== 'node node-finish' &&\n            className !== 'node node-wall'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (className === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic = 0;\n          }\n          if (className === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let className = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (className === 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n\n  /* ---------------------------------- Animations ----------------------------- */\n\n  visualize(algo){\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {grid} = this.state;\n      const start =\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finish =\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, start, finish);\n          break;\n        case 'astar':\n          visitedNodesInOrder = astar(grid, start, finish);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, start, finish);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, start, finish);\n          break;\n        default:\n          // should not execute\n          break;\n      }\n      const path = getPath(finish);\n      path.push('end');\n      this.animate(visitedNodesInOrder, path);\n    }\n  }\n\n  animate(visitedNodesInOrder, path) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClass = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClass !== 'node node-start' &&\n          nodeClass !== 'node node-finish'\n        ) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      if (path[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = path[i];\n          const nodeClass = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClass !== 'node node-start' &&\n            nodeClass !== 'node node-finish'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n\n  /* ------------------------------- Construct Path ----------------------------- */\n    render() {\n      const {grid, mousePressed} = this.state;\n      return (\n        <div>\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n            <a className=\"navbar-brand\" href=\"/\">\n              <b>PathFinding Visualizer</b>\n            </a>\n            <button\n              className=\"navbar-toggler\"\n              type=\"button\"\n              data-toggle=\"collapse\"\n              data-target=\"#navbarNav\"\n              aria-controls=\"navbarNav\"\n              aria-expanded=\"false\"\n              aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <a\n                    className=\"nav-link\"\n                    href=\"http://www.github.com/jfur1/pathfinding\">\n                    {' '}\n                    PathFinder Visualizer code{' '}\n                  </a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"https://jfur1.github.io\">\n                    Check Out Other Cool Projects\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </nav>\n\n          <table\n            className=\"grid-container\"\n            onMouseLeave={() => this.handleMouseLeave()}>\n            <tbody className=\"grid\">\n              {grid.map((row, rowIdx) => {\n                return (\n                  <tr key={rowIdx}>\n                    {row.map((node, nodeIdx) => {\n                      const {row, col, isFinish, isStart, isWall} = node;\n                      return (\n                        <Node\n                          key={nodeIdx}\n                          col={col}\n                          isFinish={isFinish}\n                          isStart={isStart}\n                          isWall={isWall}\n                          mousePressed={mousePressed}\n                          onMouseDown={(row, col) =>\n                            this.handleMouseDown(row, col)\n                          }\n                          onMouseEnter={(row, col) =>\n                            this.handleMouseEnter(row, col)\n                          }\n                          onMouseUp={() => this.handleMouseUp(row, col)}\n                          row={row}></Node>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => this.clearGrid()}>\n            Clear Grid\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={() => this.clearWalls()}>\n            Clear Walls\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => this.visualize('Dijkstra')}>\n            Dijkstra's\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => this.visualize('astar')}>\n            A*\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => this.visualize('BFS')}>\n            Breadth-First Search\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => this.visualize('DFS')}>\n            Depth-First Search\n          </button>\n          {this.state.isDesktopView ? (\n            <button\n              type=\"button\"\n              className=\"btn btn-light\"\n              onClick={() => this.toggleView()}>\n              Mobile View\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={() => this.toggleView()}>\n              Desktop View\n            </button>\n          )}\n        </div>\n      );\n    }\n  };\n\n\n  /******************** Create Walls ********************/\n  const updateGrid = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    if (!node.isStart && !node.isFinish && node.isNode) {\n      const newNode = {\n        ...node,\n        isWall: !node.isWall,\n      };\n      newGrid[row][col] = newNode;\n    }\n    return newGrid;\n  };\n\n  // Backtracks from the goal to find the shortest path.\n  // Only works when called after the pathfinding method has executed.\n  function getPath(goal) {\n    const path = [];\n    let node = goal;\n    while (node !== null) {\n      path.unshift(node);\n      node = node.previousNode;\n    }\n    return path;\n  }\n\n// export default class PathfindingVisualizer extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       grid: [],\n//       nodes: {},\n//       mouseDown: false,\n//       algoFinished: true,\n//       currentAlgo: null,\n//       start: null,\n//       target: null\n//     };\n//   }\n\n//   componentDidMount() {\n//     const board = this.initGrid();\n//     this.setState({grid: board[0], nodes: board[1]});\n//   }\n\n//   onMouseDown(row, col) {\n//     // const newGrid = updateGrid(this.state.grid, row, col);\n//     // const newNodes = updateNodes(this.state.nodes, row, col);\n//     const board = updateBoard(this.state.grid, this.state.nodes, row, col);\n//     this.setState({grid: board[0], nodes: board[1], mouseDown: true});\n//   }\n\n//   onMouseEnter(row, col) {\n//     if (!this.state.mouseDown) return;\n//     // const newGrid = updateGrid(this.state.grid, row, col);\n//     // const newNodes = updateNodes(this.state.nodes, row, col);\n//     const board = updateBoard(this.state.grid, this.state.nodes, row, col);\n//     this.setState({grid: board[0], nodes: board[1]});\n//   }\n\n//   onMouseUp() {\n//     this.setState({mouseDown: false});\n//   }\n\n//   animateSearch(visited, path) {\n//     if(visited === false || path.length === 1 || visited.length === 1){\n//       console.log(\"No path found.\")\n//       this.algoFinished = true;\n//       document.getElementById(\"startButton\").disabled = false;\n//       document.getElementById(\"clearGridButton\").disabled = false;\n//     }else{\n//         for (let i = 0; i <= visited.length; i++) {\n//           if (i === visited.length) {\n//             setTimeout(() => {\n//               this.animatePath(path);\n//             }, 10 * i);\n//             return;\n//           }\n//           // Visited nodes get animated in 10ms intervals\n//           setTimeout(() => {\n//             const node = visited[i];\n//             document.getElementById(`node-${node.row}-${node.col}`).className =\n//               'node node-visited';\n//           }, 10 * i);\n//         }\n//       }\n//     }\n\n//   animatePath(path) {\n//     for (let i = 0; i < path.length; i++) {\n//       setTimeout(() => {\n//         const node = path[i];\n//         document.getElementById(`node-${node.row}-${node.col}`).className =\n//           'node node-shortest-path';\n//       }, 25 * i);\n//     }\n//     this.algoFinished = true;\n//     document.getElementById(\"startButton\").disabled = false;\n//     document.getElementById(\"clearGridButton\").disabled = false;\n//   }\n\n//   visualizeSearch() {\n//       const algo = document.getElementById(\"startButton\").innerHTML;\n//       if(algo === \"Visualize Algorithm\"){\n//         console.log(\"Select an algorithm!\");\n//       }\n//       else{\n//         console.log(\"Selected Algorithm:\", algo);\n\n//         // Clear any visited nodes from the grid\n//         this.clearGrid();\n//         document.getElementById(\"startButton\").disabled = true;\n//         document.getElementById(\"clearGridButton\").disabled = true;\n//         this.algoFinished = false;\n\n//         const {grid, nodes} = this.state;\n//         const start = grid[START_NODE_ROW][START_NODE_COL];\n//         const goal = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n//         var visited = [];\n//         var path = [];\n\n//         // Select algo based on start button text\n//         if(algo === \"A* Search\"){\n//           console.log(nodes);\n//           // console.log(\"start:\", start)\n//           // console.log(\"start-id:\", start.id)\n//           // console.log(\"goal:\", goal)\n//           //visited = astar(nodes, start, goal, visited, grid, []);\n//           visited = astar(grid, start, goal);\n//           path = getAstarPath(goal);\n//           console.log(\"Astar Visited:\", visited);\n//           console.log(\"Astar Path:\", path);\n//           this.animateSearch(visited, path);\n//         }\n//         else if(algo === \"Dijkstra's Algorithm\"){\n//           visited = dijkstra(grid, start, goal);\n//           path = getPath(goal);\n//           console.log(\"Dijkstra Visited:\", visited);\n//           console.log(\"Dijkstra Path:\", path);\n//           this.animateSearch(visited, path);\n//         }else if(algo === \"Depth-First-Search\"){\n//           visited = dfs(grid, start, goal);\n//           path = getPath(goal);\n//           console.log(\"DFS Visited:\", visited);\n//           console.log(\"DFS Path:\", path);\n//           this.animateSearch(visited, path);\n//         }else if(algo === \"Breadth-First-Search\"){\n//           visited = bfs(grid, start, goal);\n//           path = getPath(goal);\n//           console.log(\"BFS Visited:\", visited);\n//           console.log(\"BFS Path:\", path);\n//           this.animateSearch(visited, path);\n//         }\n//       }\n//   }\n//   // Same as init grid, exept walls & start/goal nodes are kept\n//   clearGrid() {\n//     if(this.algoFinished){\n//       for(let row = 0; row < 20; row++) {\n//         for (let col = 0; col < 50; col++) {\n//           this.state.grid[row][col].previousNode = null;\n//           this.state.grid[row][col].isVisited = false;\n//           if(row === START_NODE_ROW && col === START_NODE_COL){\n//             document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n//           }\n//           else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n//             document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n//           }\n//           else if(document.getElementById(`node-${row}-${col}`).className === \"node node-visited\"){\n//             document.getElementById(`node-${row}-${col}`).className = 'node';\n//           }\n//           else if(document.getElementById(`node-${row}-${col}`).className === \"node node-shortest-path\"){\n//             document.getElementById(`node-${row}-${col}`).className = 'node';\n//           }\n//         }\n//       }\n//     }\n//   }\n//   // Initialize New Grid\n//   initGrid = () => {\n//     var grid = [];\n//     var nodes = {};\n//     for (let row = 0; row < 20; row++) {\n//       const tmpRow = [];\n//       for (let col = 0; col < 50; col++) {\n//         var nodeId = `${row}-${col}`, nodeClass, node;\n//         var node = newNode(col, row);\n\n//         if(row === START_NODE_ROW && col === START_NODE_COL){\n//           node.status = \"start\"\n//         } \n//         else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n//           node.status = \"target\"\n//         } \n//         else node.status = \"node\"\n\n//         tmpRow.push(node);\n//         nodes[nodeId] = node;\n//       }\n//       grid.push(tmpRow);\n//     }\n//     return [grid, nodes];\n//   };\n\n//   render() {\n//     const {grid, mouseDown, algoFinished} = this.state;\n//     let tableHTML = \"\";\n//     return (\n//       <>\n//         <div class=\"board\">\n//         <div class=\"center\">\n//           <button id=\"startButton\" onClick={() => this.visualizeSearch()}>Visualize Algorithm</button>\n//         </div>\n//         <div class=\"center\">\n//           <button id=\"clearGridButton\" onClick={() => this.initGrid()}>Reset Grid</button>\n//         </div>\n//         <div className=\"grid\">\n//           {grid.map((row, rowIdx) => {\n//             return (\n//               <div key={rowIdx}>\n//                 {row.map((node, nodeIdx) => {\n//                   const {row, col, isFinish, isStart, isWall} = node;\n//                   return (\n//                     <Node\n//                       key={nodeIdx}\n//                       col={col}\n//                       g = {Infinity}\n//                       h = {null}\n//                       f = {Infinity}\n//                       isFinish={isFinish}\n//                       isStart={isStart}\n//                       isWall={isWall}\n//                       mouseDown={mouseDown}\n//                       onMouseDown={(row, col) => this.onMouseDown(row, col)}\n//                       onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n//                       onMouseUp={() => this.onMouseUp()}\n//                       row={row}></Node>\n//                   );\n//                 })}\n//               </div>\n//             );\n//           })}\n//         </div>\n//         </div>\n//       </>\n//     );\n//   }\n// }\n// // Create a new Node\n// const newNode = (col, row) => {\n//   return {\n//     col,\n//     row,\n//     isStart: row === START_NODE_ROW && col === START_NODE_COL,\n//     isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n//     g: Infinity,\n//     h: null,\n//     f: Infinity,\n//     status: null,\n//     isVisited: false,\n//     isWall: false,\n//     previousNode: null,\n//     weight: 0,\n//     id: `${row}-${col}`\n//   };\n// };\n// // Update our grid state\n// const updateBoard = (grid, nodes, row, col) => {\n//   // Create copies of grid & nodes\n//   const newGrid = grid.slice();\n//   const newNodes = nodes;\n//   // If start/goal node, continue\n//   if(row === START_NODE_ROW && col === START_NODE_COL \n//     || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n//     return [grid, nodes];\n//   }\n//   // Get the node in question\n//   const node = newGrid[row][col];\n//   // Create a new node with prop \"isWall\" toggled\n//   const newNode = {\n//     ...node,\n//    isWall: !node.isWall,\n//   };\n//   // Set status to wall if .isWall === true\n//   if(newNode.isWall) newNode.status = \"wall\";\n//   else newNode.status = \"node\";\n//   // Update the new node in the grid & nodes sets, then return to be updated as state\n//   newNodes[`${row}-${col}`] = newNode;\n//   newGrid[row][col] = newNode;\n\n//   return [newGrid, newNodes];\n// };","export function bfs(grid, start, goal){\n    const visited = [];\n    let stack = [start];\n    while(stack.length){\n        const node = stack.shift();\n        if(node.id === goal.id) return visited;\n\n        if(!node.isWall && (node.isStart || !node.isVisited)){\n            node.isVisited = true;\n            visited.push(node);\n            const {col, row} = node;\n            let nextNode;\n            if(row > 0){\n                nextNode = grid[row-1][col];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(row < grid.length - 1){\n                nextNode = grid[row+1][col];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(col > 0){\n                nextNode = grid[row][col-1];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(col < grid[0].length-1){\n                nextNode = grid[row][col+1];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n        }\n    }\n    return visited;\n}","export function dfs(grid, start, goal){\n    const visited = [];\n    let stack = [start];\n    while(stack.length){\n        const node = stack.pop();\n        if(node.id === goal.id) return visited;\n\n        if(!node.isWall && (node.isStart || !node.isVisited)){\n            node.isVisited = true;\n            visited.push(node);\n            const {col, row} = node;\n            let nextNode;\n            if(row > 0){\n                nextNode = grid[row-1][col];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(row < grid.length - 1){\n                nextNode = grid[row+1][col];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(col > 0){\n                nextNode = grid[row][col-1];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n            if(col < grid[0].length-1){\n                nextNode = grid[row][col+1];\n                if(!nextNode.isVisited){\n                    nextNode.previousNode = node;\n                    stack.push(nextNode);\n                }\n            }\n        }\n    }\n    return visited;\n}","import React, {Component} from 'react';\nimport './navbar.css';\n\nexport default class Navbar extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {value: props.value};\n    }\n\n    handleChange(event){\n        this.setState({value: event.target.value});\n    }\n    \n    toggleDropdown(){\n        document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n\n    selectAlgo(algoName){\n        this.toggleDropdown();\n        document.getElementById(\"startButton\").innerHTML = algoName;\n    }\n\n    render(){\n        return(\n            <div class=\"navbar\">\n                <div class=\"dropdown\">\n                    <button onClick={() => this.toggleDropdown()} class=\"dropbtn\">Select an Algorithm</button>\n                    <div id=\"myDropdown\" class=\"dropdown-content\">\n                        <a href=\"#\" id=\"dijkstraStart\" onClick={() => this.selectAlgo(\"Dijkstra's Algorithm\")}>Dijkstra's Algorithm</a>\n                        <a href=\"#\" id=\"astarStart\" onClick={() => this.selectAlgo(\"A* Search\")}>A* Search</a>\n                        <a href=\"#\" id=\"bfsStart\" onClick={() => this.selectAlgo(\"Breadth-First-Search\")}>BFS</a>\n                        <a href=\"#\" id=\"dfsStart\" onClick={() => this.selectAlgo(\"Depth-First-Search\")}>DFS</a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}    \n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function(event) {\n    if (!event.target.matches('.dropbtn')) {\n    var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n    var i;\n    for (i = 0; i < dropdowns.length; i++) {\n        var openDropdown = dropdowns[i];\n        if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n        }\n    }\n    }\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './pathfindingVisualizer/pathfindingVisualizer';\nimport Navbar from './navbar';\n\nfunction App() {\n  return (    \n    <div className=\"App\">\n\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}