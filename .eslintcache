[{"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/index.js":"1","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/App.js":"2","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/navbar.jsx":"3","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/pathfindingVisualizer.jsx":"4","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/astar.js":"5","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dijkstra.js":"6","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/Node/Node.jsx":"7","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/Navbar.jsx":"8"},{"size":167,"mtime":1609793818224,"results":"9","hashOfConfig":"10"},{"size":329,"mtime":1609793869443,"results":"11","hashOfConfig":"10"},{"size":1823,"mtime":1609791122747,"results":"12","hashOfConfig":"10"},{"size":7728,"mtime":1609791122748,"results":"13","hashOfConfig":"10"},{"size":6788,"mtime":1609791122746,"results":"14","hashOfConfig":"10"},{"size":2076,"mtime":1609791122747,"results":"15","hashOfConfig":"10"},{"size":732,"mtime":1609791122748,"results":"16","hashOfConfig":"10"},{"size":1823,"mtime":1609793771160,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1entc3h",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/index.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/App.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/navbar.jsx",["37","38","39","40"],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/pathfindingVisualizer.jsx",["41","42","43","44","45","46","47","48","49","50","51","52","53"],"import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getPath} from '../algorithms/dijkstra';\nimport {astar, getAstarPath} from '../algorithms/astar';\nimport './pathfindingVisualizer.css';\nimport { nodeName } from 'jquery';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      nodes: {},\n      mouseDown: false,\n      algoFinished: true,\n      currentAlgo: null,\n      start: null,\n      target: null\n    };\n  }\n\n  componentDidMount() {\n    const board = this.initGrid();\n    this.setState({grid: board[0], nodes: board[1]});\n  }\n\n  onMouseDown(row, col) {\n    const newGrid = updateGrid(this.state.grid, row, col);\n    const newNodes = updateNodes(this.state.nodes, row, col);\n    this.setState({grid: newGrid, nodes: newNodes, mouseDown: true});\n  }\n\n  onMouseEnter(row, col) {\n    if (!this.state.mouseDown) return;\n    const newGrid = updateGrid(this.state.grid, row, col);\n    const newNodes = updateNodes(this.state.nodes, row, col);\n    this.setState({grid: newGrid, nodes: newNodes});\n  }\n\n  onMouseUp() {\n    this.setState({mouseDown: false});\n  }\n\n  animateSearch(visited, path) {\n    if(visited === false){\n      console.log(\"No path found.\")\n      this.algoFinished = true;\n      document.getElementById(\"startButton\").disabled = false;\n      document.getElementById(\"clearGridButton\").disabled = false;\n    }\n    for (let i = 0; i <= visited.length; i++) {\n      if (i === visited.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      // Visited nodes get animated in 10ms intervals\n      setTimeout(() => {\n        const node = visited[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 35 * i);\n    }\n    this.algoFinished = true;\n    document.getElementById(\"startButton\").disabled = false;\n    document.getElementById(\"clearGridButton\").disabled = false;\n  }\n\n  visualizeSearch() {\n      const algo = document.getElementById(\"startButton\").innerHTML;\n      document.getElementById(\"startButton\").disabled = true;\n      document.getElementById(\"clearGridButton\").disabled = true;\n      console.log(algo);\n      this.algoFinished = false;\n      const {grid, nodes} = this.state;\n      const start = grid[START_NODE_ROW][START_NODE_COL];\n      const goal = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      var visited = [];\n      var path = [];\n      // Select algo based on start button text\n      if(algo === \"A* Search\"){\n        console.log(nodes)\n        // console.log(\"start:\", start)\n        // console.log(\"start-id:\", start.id)\n        // console.log(\"goal:\", goal)\n        visited = astar(nodes, start, goal, visited, grid, []);\n        path = getAstarPath(goal);\n        console.log(\"Visited:\", visited);\n        console.log(\"Path:\", path);\n        this.animateSearch(visited, path);\n      }\n      else if(algo === \"Dijkstra's Algorithm\"){\n        visited = dijkstra(grid, start, goal);\n        path = getPath(goal);\n        this.animateSearch(visited, path);\n      }\n  }\n\n  clearGrid() {\n    if(this.algoFinished){\n      const board = this.initGrid();\n      this.setState({grid: board[0], nodes: board[1]});\n      for(let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n          if(row === START_NODE_ROW && col === START_NODE_COL){\n            //this.nodes[this.start].status = \"start\"\n            document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          }\n          else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n            //this.target.status = \"target\";\n          }\n          else{\n            //this.nodes[`${row}-${col}`].status = \"unvisited\";\n            document.getElementById(`node-${row}-${col}`).className = 'node';\n          }\n        }\n      }\n    }\n  }\n  // Initialize New Grid\n  initGrid = () => {\n    var grid = [];\n    var nodes = {};\n    for (let row = 0; row < 20; row++) {\n      const tmpRow = [];\n      for (let col = 0; col < 50; col++) {\n        var nodeId = `${row}-${col}`, nodeClass, node;\n        var node = newNode(col, row);\n\n        if(row === START_NODE_ROW && col === START_NODE_COL){\n          node.status = \"start\"\n        } \n        else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n          node.status = \"target\"\n        } \n        else node.status = \"node\"\n\n        tmpRow.push(node);\n        nodes[nodeId] = node;\n      }\n      grid.push(tmpRow);\n    }\n    return [grid, nodes];\n  };\n\n  render() {\n    const {grid, mouseDown, algoFinished} = this.state;\n    let tableHTML = \"\";\n    return (\n      <>\n        \n        <div class=\"board\">\n        <div class=\"center\">\n          <button id=\"startButton\" onClick={() => this.visualizeSearch()}>Visualize Algorithm</button>\n        </div>\n        <div class=\"center\">\n          <button id=\"clearGridButton\" onClick={() => this.clearGrid()}>Clear Grid</button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      g = {Infinity}\n                      h = {null}\n                      f = {Infinity}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseDown={mouseDown}\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n                      onMouseUp={() => this.onMouseUp()}\n                      row={row}></Node>\n                      \n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        </div>\n      </>\n    );\n  }\n}\n\n// Create a new Node\nconst newNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    g: Infinity,\n    h: null,\n    f: Infinity,\n    status: null,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    weight: 0,\n    id: `${row}-${col}`\n  };\n};\n\n// Update our grid state\nconst updateGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return grid;\n  }\n  const newNode = {\n    ...node,\n   isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst updateNodes = (nodes, row, col) => {\n  if(row === START_NODE_ROW && col === START_NODE_COL \n    || row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n    return nodes;\n  }\n  const newNodes = nodes;\n  const node = nodes[`${row}-${col}`];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  if(newNode.isWall) newNode.status = \"wall\";\n  newNodes[`${row}-${col}`] = newNode;\n  return newNodes;\n}",["54","55"],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/astar.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/algorithms/dijkstra.js",[],"/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/pathfindingVisualizer/Node/Node.jsx",["56","57","58","59","60","61"],"import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      g,\n      h,\n      f,\n      direction,\n      weight,\n      status\n    } = this.props;\n    const type = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${type}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}","/Users/johnfurlong/Documents/code/Projects/pathfinding-visualizer/pathfinding/src/Navbar.jsx",["62","63","64","65"],{"ruleId":"66","severity":1,"message":"67","line":32,"column":25,"nodeType":"68","endLine":32,"endColumn":112},{"ruleId":"66","severity":1,"message":"67","line":33,"column":25,"nodeType":"68","endLine":33,"endColumn":98},{"ruleId":"66","severity":1,"message":"67","line":34,"column":25,"nodeType":"68","endLine":34,"endColumn":107},{"ruleId":"66","severity":1,"message":"67","line":35,"column":25,"nodeType":"68","endLine":35,"endColumn":105},{"ruleId":"69","severity":1,"message":"70","line":6,"column":10,"nodeType":"71","messageId":"72","endLine":6,"endColumn":18},{"ruleId":"69","severity":1,"message":"73","line":145,"column":39,"nodeType":"71","messageId":"72","endLine":145,"endColumn":48},{"ruleId":"74","severity":1,"message":"75","line":146,"column":13,"nodeType":"71","messageId":"76","endLine":146,"endColumn":17},{"ruleId":"69","severity":1,"message":"77","line":165,"column":29,"nodeType":"71","messageId":"72","endLine":165,"endColumn":41},{"ruleId":"69","severity":1,"message":"78","line":166,"column":9,"nodeType":"71","messageId":"72","endLine":166,"endColumn":18},{"ruleId":"79","severity":1,"message":"80","line":234,"column":29,"nodeType":"81","messageId":"82","endLine":234,"endColumn":31},{"ruleId":"79","severity":1,"message":"80","line":235,"column":5,"nodeType":"81","messageId":"82","endLine":235,"endColumn":7},{"ruleId":"79","severity":1,"message":"83","line":235,"column":5,"nodeType":"81","messageId":"82","endLine":235,"endColumn":7},{"ruleId":"79","severity":1,"message":"83","line":235,"column":32,"nodeType":"81","messageId":"82","endLine":235,"endColumn":34},{"ruleId":"79","severity":1,"message":"80","line":247,"column":29,"nodeType":"81","messageId":"82","endLine":247,"endColumn":31},{"ruleId":"79","severity":1,"message":"80","line":248,"column":5,"nodeType":"81","messageId":"82","endLine":248,"endColumn":7},{"ruleId":"79","severity":1,"message":"83","line":248,"column":5,"nodeType":"81","messageId":"82","endLine":248,"endColumn":7},{"ruleId":"79","severity":1,"message":"83","line":248,"column":32,"nodeType":"81","messageId":"82","endLine":248,"endColumn":34},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"69","severity":1,"message":"88","line":15,"column":7,"nodeType":"71","messageId":"72","endLine":15,"endColumn":8},{"ruleId":"69","severity":1,"message":"89","line":16,"column":7,"nodeType":"71","messageId":"72","endLine":16,"endColumn":8},{"ruleId":"69","severity":1,"message":"90","line":17,"column":7,"nodeType":"71","messageId":"72","endLine":17,"endColumn":8},{"ruleId":"69","severity":1,"message":"91","line":18,"column":7,"nodeType":"71","messageId":"72","endLine":18,"endColumn":16},{"ruleId":"69","severity":1,"message":"92","line":19,"column":7,"nodeType":"71","messageId":"72","endLine":19,"endColumn":13},{"ruleId":"69","severity":1,"message":"93","line":20,"column":7,"nodeType":"71","messageId":"72","endLine":20,"endColumn":13},{"ruleId":"66","severity":1,"message":"67","line":32,"column":25,"nodeType":"68","endLine":32,"endColumn":112},{"ruleId":"66","severity":1,"message":"67","line":33,"column":25,"nodeType":"68","endLine":33,"endColumn":98},{"ruleId":"66","severity":1,"message":"67","line":34,"column":25,"nodeType":"68","endLine":34,"endColumn":107},{"ruleId":"66","severity":1,"message":"67","line":35,"column":25,"nodeType":"68","endLine":35,"endColumn":105},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'nodeName' is defined but never used.","Identifier","unusedVar","'nodeClass' is defined but never used.","no-redeclare","'node' is already defined.","redeclared","'algoFinished' is assigned a value but never used.","'tableHTML' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-native-reassign",["94"],"no-negated-in-lhs",["95"],"'g' is assigned a value but never used.","'h' is assigned a value but never used.","'f' is assigned a value but never used.","'direction' is assigned a value but never used.","'weight' is assigned a value but never used.","'status' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]